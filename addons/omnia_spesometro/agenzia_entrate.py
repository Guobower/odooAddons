#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Oct  5 12:05:11 2017 by generateDS.py version 2.28b.
# Python 2.7.9 (default, Jun 29 2016, 13:08:31)  [GCC 4.9.2]
#
# Command line options:
#   ('-o', '/srv/workspace/odooAddons-7/addons/omnia_spesometro/agenzia_entrate.py')
#   ('-s', '/srv/workspace/odooAddons-7/addons/omnia_spesometro/agenzia_entrate_subs.py')
#
# Command line arguments:
#   /srv/workspace/odooAddons-7/addons/omnia_spesometro/agenzia_entrate.xsd
#
# Command line:
#   /usr/local/bin/generateDS.py -o "/srv/workspace/odooAddons-7/addons/omnia_spesometro/agenzia_entrate.py" -s "/srv/workspace/odooAddons-7/addons/omnia_spesometro/agenzia_entrate_subs.py" /srv/workspace/odooAddons-7/addons/omnia_spesometro/agenzia_entrate.xsd
#
# Current working directory (os.getcwd()):
#   omnia_spesometro
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.2f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class DatiFatturaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, versione=None, DatiFatturaHeader=None, DTE=None, DTR=None, ANN=None, Signature=None):
        self.original_tagname_ = None
        self.versione = _cast(None, versione)
        self.DatiFatturaHeader = DatiFatturaHeader
        self.DTE = DTE
        self.DTR = DTR
        self.ANN = ANN
        self.Signature = Signature
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DatiFatturaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DatiFatturaType.subclass:
            return DatiFatturaType.subclass(*args_, **kwargs_)
        else:
            return DatiFatturaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DatiFatturaHeader(self): return self.DatiFatturaHeader
    def set_DatiFatturaHeader(self, DatiFatturaHeader): self.DatiFatturaHeader = DatiFatturaHeader
    def get_DTE(self): return self.DTE
    def set_DTE(self, DTE): self.DTE = DTE
    def get_DTR(self): return self.DTR
    def set_DTR(self, DTR): self.DTR = DTR
    def get_ANN(self): return self.ANN
    def set_ANN(self, ANN): self.ANN = ANN
    def get_Signature(self): return self.Signature
    def set_Signature(self, Signature): self.Signature = Signature
    def get_versione(self): return self.versione
    def set_versione(self, versione): self.versione = versione
    def validate_VersioneType(self, value):
        # Validate type VersioneType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['DAT20']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on VersioneType' % {"value" : value.encode("utf-8")} )
            if len(value) != 5:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on VersioneType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.DatiFatturaHeader is not None or
            self.DTE is not None or
            self.DTR is not None or
            self.ANN is not None or
            self.Signature is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DatiFatturaType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DatiFatturaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DatiFatturaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DatiFatturaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DatiFatturaType'):
        if self.versione is not None and 'versione' not in already_processed:
            already_processed.add('versione')
            outfile.write(' versione=%s' % (quote_attrib(self.versione), ))
    def exportChildren(self, outfile, level, namespace_='', name_='DatiFatturaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DatiFatturaHeader is not None:
            self.DatiFatturaHeader.export(outfile, level, namespace_, name_='DatiFatturaHeader', pretty_print=pretty_print)
        if self.DTE is not None:
            self.DTE.export(outfile, level, namespace_, name_='DTE', pretty_print=pretty_print)
        if self.DTR is not None:
            self.DTR.export(outfile, level, namespace_, name_='DTR', pretty_print=pretty_print)
        if self.ANN is not None:
            self.ANN.export(outfile, level, namespace_, name_='ANN', pretty_print=pretty_print)
        if self.Signature is not None:
            self.Signature.export(outfile, level, namespace_='ds:', name_='Signature', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('versione', node)
        if value is not None and 'versione' not in already_processed:
            already_processed.add('versione')
            self.versione = value
            self.validate_VersioneType(self.versione)    # validate type VersioneType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DatiFatturaHeader':
            obj_ = DatiFatturaHeaderType.factory()
            obj_.build(child_)
            self.DatiFatturaHeader = obj_
            obj_.original_tagname_ = 'DatiFatturaHeader'
        elif nodeName_ == 'DTE':
            obj_ = DTEType.factory()
            obj_.build(child_)
            self.DTE = obj_
            obj_.original_tagname_ = 'DTE'
        elif nodeName_ == 'DTR':
            obj_ = DTRType.factory()
            obj_.build(child_)
            self.DTR = obj_
            obj_.original_tagname_ = 'DTR'
        elif nodeName_ == 'ANN':
            obj_ = ANNType.factory()
            obj_.build(child_)
            self.ANN = obj_
            obj_.original_tagname_ = 'ANN'
        elif nodeName_ == 'Signature':
            obj_ = SignatureType.factory()
            obj_.build(child_)
            self.Signature = obj_
            obj_.original_tagname_ = 'Signature'
# end class DatiFatturaType


class DatiFatturaHeaderType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ProgressivoInvio=None, Dichiarante=None, IdSistema=None):
        self.original_tagname_ = None
        self.ProgressivoInvio = ProgressivoInvio
        self.validate_String10Type(self.ProgressivoInvio)
        self.Dichiarante = Dichiarante
        self.IdSistema = IdSistema
        self.validate_CodiceFiscaleType(self.IdSistema)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DatiFatturaHeaderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DatiFatturaHeaderType.subclass:
            return DatiFatturaHeaderType.subclass(*args_, **kwargs_)
        else:
            return DatiFatturaHeaderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ProgressivoInvio(self): return self.ProgressivoInvio
    def set_ProgressivoInvio(self, ProgressivoInvio): self.ProgressivoInvio = ProgressivoInvio
    def get_Dichiarante(self): return self.Dichiarante
    def set_Dichiarante(self, Dichiarante): self.Dichiarante = Dichiarante
    def get_IdSistema(self): return self.IdSistema
    def set_IdSistema(self, IdSistema): self.IdSistema = IdSistema
    def validate_String10Type(self, value):
        # Validate type String10Type, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_String10Type_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_String10Type_patterns_, ))
    validate_String10Type_patterns_ = [['^(\\p{IsBasicLatin}{1,10})$']]
    def validate_CodiceFiscaleType(self, value):
        # Validate type CodiceFiscaleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CodiceFiscaleType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CodiceFiscaleType_patterns_, ))
    validate_CodiceFiscaleType_patterns_ = [['^[A-Z0-9]{11,16}$']]
    def hasContent_(self):
        if (
            self.ProgressivoInvio is not None or
            self.Dichiarante is not None or
            self.IdSistema is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DatiFatturaHeaderType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DatiFatturaHeaderType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DatiFatturaHeaderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DatiFatturaHeaderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DatiFatturaHeaderType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DatiFatturaHeaderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProgressivoInvio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProgressivoInvio>%s</%sProgressivoInvio>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProgressivoInvio), input_name='ProgressivoInvio')), namespace_, eol_))
        if self.Dichiarante is not None:
            self.Dichiarante.export(outfile, level, namespace_, name_='Dichiarante', pretty_print=pretty_print)
        if self.IdSistema is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdSistema>%s</%sIdSistema>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IdSistema), input_name='IdSistema')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ProgressivoInvio':
            ProgressivoInvio_ = child_.text
            ProgressivoInvio_ = self.gds_validate_string(ProgressivoInvio_, node, 'ProgressivoInvio')
            self.ProgressivoInvio = ProgressivoInvio_
            # validate type String10Type
            self.validate_String10Type(self.ProgressivoInvio)
        elif nodeName_ == 'Dichiarante':
            obj_ = DichiaranteType.factory()
            obj_.build(child_)
            self.Dichiarante = obj_
            obj_.original_tagname_ = 'Dichiarante'
        elif nodeName_ == 'IdSistema':
            IdSistema_ = child_.text
            IdSistema_ = self.gds_validate_string(IdSistema_, node, 'IdSistema')
            self.IdSistema = IdSistema_
            # validate type CodiceFiscaleType
            self.validate_CodiceFiscaleType(self.IdSistema)
# end class DatiFatturaHeaderType


class DichiaranteType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CodiceFiscale=None, Carica=None):
        self.original_tagname_ = None
        self.CodiceFiscale = CodiceFiscale
        self.validate_CodiceFiscaleType(self.CodiceFiscale)
        self.Carica = Carica
        self.validate_CaricaType(self.Carica)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DichiaranteType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DichiaranteType.subclass:
            return DichiaranteType.subclass(*args_, **kwargs_)
        else:
            return DichiaranteType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CodiceFiscale(self): return self.CodiceFiscale
    def set_CodiceFiscale(self, CodiceFiscale): self.CodiceFiscale = CodiceFiscale
    def get_Carica(self): return self.Carica
    def set_Carica(self, Carica): self.Carica = Carica
    def validate_CodiceFiscaleType(self, value):
        # Validate type CodiceFiscaleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CodiceFiscaleType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CodiceFiscaleType_patterns_, ))
    validate_CodiceFiscaleType_patterns_ = [['^[A-Z0-9]{11,16}$']]
    def validate_CaricaType(self, value):
        # Validate type CaricaType, a restriction on xs:integer.
        if value is not None and Validate_simpletypes_:
            if value < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on CaricaType' % {"value" : value} )
            if value > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on CaricaType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.CodiceFiscale is not None or
            self.Carica is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DichiaranteType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DichiaranteType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DichiaranteType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DichiaranteType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DichiaranteType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DichiaranteType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CodiceFiscale is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodiceFiscale>%s</%sCodiceFiscale>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CodiceFiscale), input_name='CodiceFiscale')), namespace_, eol_))
        if self.Carica is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarica>%s</%sCarica>%s' % (namespace_, self.gds_format_integer(self.Carica, input_name='Carica'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CodiceFiscale':
            CodiceFiscale_ = child_.text
            CodiceFiscale_ = self.gds_validate_string(CodiceFiscale_, node, 'CodiceFiscale')
            self.CodiceFiscale = CodiceFiscale_
            # validate type CodiceFiscaleType
            self.validate_CodiceFiscaleType(self.CodiceFiscale)
        elif nodeName_ == 'Carica':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Carica')
            self.Carica = ival_
            # validate type CaricaType
            self.validate_CaricaType(self.Carica)
# end class DichiaranteType


class DTEType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CedentePrestatoreDTE=None, CessionarioCommittenteDTE=None, Rettifica=None):
        self.original_tagname_ = None
        self.CedentePrestatoreDTE = CedentePrestatoreDTE
        if CessionarioCommittenteDTE is None:
            self.CessionarioCommittenteDTE = []
        else:
            self.CessionarioCommittenteDTE = CessionarioCommittenteDTE
        self.Rettifica = Rettifica
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DTEType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DTEType.subclass:
            return DTEType.subclass(*args_, **kwargs_)
        else:
            return DTEType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CedentePrestatoreDTE(self): return self.CedentePrestatoreDTE
    def set_CedentePrestatoreDTE(self, CedentePrestatoreDTE): self.CedentePrestatoreDTE = CedentePrestatoreDTE
    def get_CessionarioCommittenteDTE(self): return self.CessionarioCommittenteDTE
    def set_CessionarioCommittenteDTE(self, CessionarioCommittenteDTE): self.CessionarioCommittenteDTE = CessionarioCommittenteDTE
    def add_CessionarioCommittenteDTE(self, value): self.CessionarioCommittenteDTE.append(value)
    def insert_CessionarioCommittenteDTE_at(self, index, value): self.CessionarioCommittenteDTE.insert(index, value)
    def replace_CessionarioCommittenteDTE_at(self, index, value): self.CessionarioCommittenteDTE[index] = value
    def get_Rettifica(self): return self.Rettifica
    def set_Rettifica(self, Rettifica): self.Rettifica = Rettifica
    def hasContent_(self):
        if (
            self.CedentePrestatoreDTE is not None or
            self.CessionarioCommittenteDTE or
            self.Rettifica is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DTEType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DTEType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DTEType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DTEType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DTEType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DTEType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CedentePrestatoreDTE is not None:
            self.CedentePrestatoreDTE.export(outfile, level, namespace_, name_='CedentePrestatoreDTE', pretty_print=pretty_print)
        for CessionarioCommittenteDTE_ in self.CessionarioCommittenteDTE:
            CessionarioCommittenteDTE_.export(outfile, level, namespace_, name_='CessionarioCommittenteDTE', pretty_print=pretty_print)
        if self.Rettifica is not None:
            self.Rettifica.export(outfile, level, namespace_, name_='Rettifica', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CedentePrestatoreDTE':
            obj_ = CedentePrestatoreDTEType.factory()
            obj_.build(child_)
            self.CedentePrestatoreDTE = obj_
            obj_.original_tagname_ = 'CedentePrestatoreDTE'
        elif nodeName_ == 'CessionarioCommittenteDTE':
            obj_ = CessionarioCommittenteDTEType.factory()
            obj_.build(child_)
            self.CessionarioCommittenteDTE.append(obj_)
            obj_.original_tagname_ = 'CessionarioCommittenteDTE'
        elif nodeName_ == 'Rettifica':
            obj_ = RettificaType.factory()
            obj_.build(child_)
            self.Rettifica = obj_
            obj_.original_tagname_ = 'Rettifica'
# end class DTEType


class DTRType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CessionarioCommittenteDTR=None, CedentePrestatoreDTR=None, Rettifica=None):
        self.original_tagname_ = None
        self.CessionarioCommittenteDTR = CessionarioCommittenteDTR
        if CedentePrestatoreDTR is None:
            self.CedentePrestatoreDTR = []
        else:
            self.CedentePrestatoreDTR = CedentePrestatoreDTR
        self.Rettifica = Rettifica
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DTRType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DTRType.subclass:
            return DTRType.subclass(*args_, **kwargs_)
        else:
            return DTRType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CessionarioCommittenteDTR(self): return self.CessionarioCommittenteDTR
    def set_CessionarioCommittenteDTR(self, CessionarioCommittenteDTR): self.CessionarioCommittenteDTR = CessionarioCommittenteDTR
    def get_CedentePrestatoreDTR(self): return self.CedentePrestatoreDTR
    def set_CedentePrestatoreDTR(self, CedentePrestatoreDTR): self.CedentePrestatoreDTR = CedentePrestatoreDTR
    def add_CedentePrestatoreDTR(self, value): self.CedentePrestatoreDTR.append(value)
    def insert_CedentePrestatoreDTR_at(self, index, value): self.CedentePrestatoreDTR.insert(index, value)
    def replace_CedentePrestatoreDTR_at(self, index, value): self.CedentePrestatoreDTR[index] = value
    def get_Rettifica(self): return self.Rettifica
    def set_Rettifica(self, Rettifica): self.Rettifica = Rettifica
    def hasContent_(self):
        if (
            self.CessionarioCommittenteDTR is not None or
            self.CedentePrestatoreDTR or
            self.Rettifica is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DTRType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DTRType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DTRType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DTRType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DTRType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DTRType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CessionarioCommittenteDTR is not None:
            self.CessionarioCommittenteDTR.export(outfile, level, namespace_, name_='CessionarioCommittenteDTR', pretty_print=pretty_print)
        for CedentePrestatoreDTR_ in self.CedentePrestatoreDTR:
            CedentePrestatoreDTR_.export(outfile, level, namespace_, name_='CedentePrestatoreDTR', pretty_print=pretty_print)
        if self.Rettifica is not None:
            self.Rettifica.export(outfile, level, namespace_, name_='Rettifica', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CessionarioCommittenteDTR':
            obj_ = CessionarioCommittenteDTRType.factory()
            obj_.build(child_)
            self.CessionarioCommittenteDTR = obj_
            obj_.original_tagname_ = 'CessionarioCommittenteDTR'
        elif nodeName_ == 'CedentePrestatoreDTR':
            obj_ = CedentePrestatoreDTRType.factory()
            obj_.build(child_)
            self.CedentePrestatoreDTR.append(obj_)
            obj_.original_tagname_ = 'CedentePrestatoreDTR'
        elif nodeName_ == 'Rettifica':
            obj_ = RettificaType.factory()
            obj_.build(child_)
            self.Rettifica = obj_
            obj_.original_tagname_ = 'Rettifica'
# end class DTRType


class ANNType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IdFile=None, Posizione=None):
        self.original_tagname_ = None
        self.IdFile = IdFile
        self.validate_String18Type(self.IdFile)
        self.Posizione = Posizione
        self.validate_PosizioneType(self.Posizione)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ANNType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ANNType.subclass:
            return ANNType.subclass(*args_, **kwargs_)
        else:
            return ANNType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdFile(self): return self.IdFile
    def set_IdFile(self, IdFile): self.IdFile = IdFile
    def get_Posizione(self): return self.Posizione
    def set_Posizione(self, Posizione): self.Posizione = Posizione
    def validate_String18Type(self, value):
        # Validate type String18Type, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_String18Type_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_String18Type_patterns_, ))
    validate_String18Type_patterns_ = [['^(\\p{IsBasicLatin}{1,18})$']]
    def validate_PosizioneType(self, value):
        # Validate type PosizioneType, a restriction on xs:integer.
        if value is not None and Validate_simpletypes_:
            if value < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on PosizioneType' % {"value" : value} )
            if value > 9999999:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on PosizioneType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.IdFile is not None or
            self.Posizione is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ANNType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ANNType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ANNType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ANNType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ANNType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ANNType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdFile is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdFile>%s</%sIdFile>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IdFile), input_name='IdFile')), namespace_, eol_))
        if self.Posizione is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosizione>%s</%sPosizione>%s' % (namespace_, self.gds_format_integer(self.Posizione, input_name='Posizione'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdFile':
            IdFile_ = child_.text
            IdFile_ = self.gds_validate_string(IdFile_, node, 'IdFile')
            self.IdFile = IdFile_
            # validate type String18Type
            self.validate_String18Type(self.IdFile)
        elif nodeName_ == 'Posizione':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Posizione')
            self.Posizione = ival_
            # validate type PosizioneType
            self.validate_PosizioneType(self.Posizione)
# end class ANNType


class CedentePrestatoreDTEType(GeneratedsSuper):
    """Blocco relativo ai dati del Cedente / Prestatore"""
    subclass = None
    superclass = None
    def __init__(self, IdentificativiFiscali=None, AltriDatiIdentificativi=None):
        self.original_tagname_ = None
        self.IdentificativiFiscali = IdentificativiFiscali
        self.AltriDatiIdentificativi = AltriDatiIdentificativi
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CedentePrestatoreDTEType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CedentePrestatoreDTEType.subclass:
            return CedentePrestatoreDTEType.subclass(*args_, **kwargs_)
        else:
            return CedentePrestatoreDTEType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdentificativiFiscali(self): return self.IdentificativiFiscali
    def set_IdentificativiFiscali(self, IdentificativiFiscali): self.IdentificativiFiscali = IdentificativiFiscali
    def get_AltriDatiIdentificativi(self): return self.AltriDatiIdentificativi
    def set_AltriDatiIdentificativi(self, AltriDatiIdentificativi): self.AltriDatiIdentificativi = AltriDatiIdentificativi
    def hasContent_(self):
        if (
            self.IdentificativiFiscali is not None or
            self.AltriDatiIdentificativi is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CedentePrestatoreDTEType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CedentePrestatoreDTEType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CedentePrestatoreDTEType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CedentePrestatoreDTEType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CedentePrestatoreDTEType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CedentePrestatoreDTEType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentificativiFiscali is not None:
            self.IdentificativiFiscali.export(outfile, level, namespace_, name_='IdentificativiFiscali', pretty_print=pretty_print)
        if self.AltriDatiIdentificativi is not None:
            self.AltriDatiIdentificativi.export(outfile, level, namespace_, name_='AltriDatiIdentificativi', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdentificativiFiscali':
            obj_ = IdentificativiFiscaliITType.factory()
            obj_.build(child_)
            self.IdentificativiFiscali = obj_
            obj_.original_tagname_ = 'IdentificativiFiscali'
        elif nodeName_ == 'AltriDatiIdentificativi':
            obj_ = AltriDatiIdentificativiNoSedeType.factory()
            obj_.build(child_)
            self.AltriDatiIdentificativi = obj_
            obj_.original_tagname_ = 'AltriDatiIdentificativi'
# end class CedentePrestatoreDTEType


class CedentePrestatoreDTRType(GeneratedsSuper):
    """Blocco relativo ai dati del Cedente / Prestatore"""
    subclass = None
    superclass = None
    def __init__(self, IdentificativiFiscali=None, AltriDatiIdentificativi=None, DatiFatturaBodyDTR=None):
        self.original_tagname_ = None
        self.IdentificativiFiscali = IdentificativiFiscali
        self.AltriDatiIdentificativi = AltriDatiIdentificativi
        if DatiFatturaBodyDTR is None:
            self.DatiFatturaBodyDTR = []
        else:
            self.DatiFatturaBodyDTR = DatiFatturaBodyDTR
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CedentePrestatoreDTRType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CedentePrestatoreDTRType.subclass:
            return CedentePrestatoreDTRType.subclass(*args_, **kwargs_)
        else:
            return CedentePrestatoreDTRType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdentificativiFiscali(self): return self.IdentificativiFiscali
    def set_IdentificativiFiscali(self, IdentificativiFiscali): self.IdentificativiFiscali = IdentificativiFiscali
    def get_AltriDatiIdentificativi(self): return self.AltriDatiIdentificativi
    def set_AltriDatiIdentificativi(self, AltriDatiIdentificativi): self.AltriDatiIdentificativi = AltriDatiIdentificativi
    def get_DatiFatturaBodyDTR(self): return self.DatiFatturaBodyDTR
    def set_DatiFatturaBodyDTR(self, DatiFatturaBodyDTR): self.DatiFatturaBodyDTR = DatiFatturaBodyDTR
    def add_DatiFatturaBodyDTR(self, value): self.DatiFatturaBodyDTR.append(value)
    def insert_DatiFatturaBodyDTR_at(self, index, value): self.DatiFatturaBodyDTR.insert(index, value)
    def replace_DatiFatturaBodyDTR_at(self, index, value): self.DatiFatturaBodyDTR[index] = value
    def hasContent_(self):
        if (
            self.IdentificativiFiscali is not None or
            self.AltriDatiIdentificativi is not None or
            self.DatiFatturaBodyDTR
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CedentePrestatoreDTRType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CedentePrestatoreDTRType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CedentePrestatoreDTRType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CedentePrestatoreDTRType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CedentePrestatoreDTRType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CedentePrestatoreDTRType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentificativiFiscali is not None:
            self.IdentificativiFiscali.export(outfile, level, namespace_, name_='IdentificativiFiscali', pretty_print=pretty_print)
        if self.AltriDatiIdentificativi is not None:
            self.AltriDatiIdentificativi.export(outfile, level, namespace_, name_='AltriDatiIdentificativi', pretty_print=pretty_print)
        for DatiFatturaBodyDTR_ in self.DatiFatturaBodyDTR:
            DatiFatturaBodyDTR_.export(outfile, level, namespace_, name_='DatiFatturaBodyDTR', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdentificativiFiscali':
            obj_ = IdentificativiFiscaliType.factory()
            obj_.build(child_)
            self.IdentificativiFiscali = obj_
            obj_.original_tagname_ = 'IdentificativiFiscali'
        elif nodeName_ == 'AltriDatiIdentificativi':
            obj_ = AltriDatiIdentificativiNoCAPType.factory()
            obj_.build(child_)
            self.AltriDatiIdentificativi = obj_
            obj_.original_tagname_ = 'AltriDatiIdentificativi'
        elif nodeName_ == 'DatiFatturaBodyDTR':
            obj_ = DatiFatturaBodyDTRType.factory()
            obj_.build(child_)
            self.DatiFatturaBodyDTR.append(obj_)
            obj_.original_tagname_ = 'DatiFatturaBodyDTR'
# end class CedentePrestatoreDTRType


class CessionarioCommittenteDTEType(GeneratedsSuper):
    """Blocco relativo ai dati del Cessionario / Committente"""
    subclass = None
    superclass = None
    def __init__(self, IdentificativiFiscali=None, AltriDatiIdentificativi=None, DatiFatturaBodyDTE=None):
        self.original_tagname_ = None
        self.IdentificativiFiscali = IdentificativiFiscali
        self.AltriDatiIdentificativi = AltriDatiIdentificativi
        if DatiFatturaBodyDTE is None:
            self.DatiFatturaBodyDTE = []
        else:
            self.DatiFatturaBodyDTE = DatiFatturaBodyDTE
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CessionarioCommittenteDTEType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CessionarioCommittenteDTEType.subclass:
            return CessionarioCommittenteDTEType.subclass(*args_, **kwargs_)
        else:
            return CessionarioCommittenteDTEType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdentificativiFiscali(self): return self.IdentificativiFiscali
    def set_IdentificativiFiscali(self, IdentificativiFiscali): self.IdentificativiFiscali = IdentificativiFiscali
    def get_AltriDatiIdentificativi(self): return self.AltriDatiIdentificativi
    def set_AltriDatiIdentificativi(self, AltriDatiIdentificativi): self.AltriDatiIdentificativi = AltriDatiIdentificativi
    def get_DatiFatturaBodyDTE(self): return self.DatiFatturaBodyDTE
    def set_DatiFatturaBodyDTE(self, DatiFatturaBodyDTE): self.DatiFatturaBodyDTE = DatiFatturaBodyDTE
    def add_DatiFatturaBodyDTE(self, value): self.DatiFatturaBodyDTE.append(value)
    def insert_DatiFatturaBodyDTE_at(self, index, value): self.DatiFatturaBodyDTE.insert(index, value)
    def replace_DatiFatturaBodyDTE_at(self, index, value): self.DatiFatturaBodyDTE[index] = value
    def hasContent_(self):
        if (
            self.IdentificativiFiscali is not None or
            self.AltriDatiIdentificativi is not None or
            self.DatiFatturaBodyDTE
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CessionarioCommittenteDTEType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CessionarioCommittenteDTEType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CessionarioCommittenteDTEType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CessionarioCommittenteDTEType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CessionarioCommittenteDTEType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CessionarioCommittenteDTEType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentificativiFiscali is not None:
            self.IdentificativiFiscali.export(outfile, level, namespace_, name_='IdentificativiFiscali', pretty_print=pretty_print)
        if self.AltriDatiIdentificativi is not None:
            self.AltriDatiIdentificativi.export(outfile, level, namespace_, name_='AltriDatiIdentificativi', pretty_print=pretty_print)
        for DatiFatturaBodyDTE_ in self.DatiFatturaBodyDTE:
            DatiFatturaBodyDTE_.export(outfile, level, namespace_, name_='DatiFatturaBodyDTE', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdentificativiFiscali':
            obj_ = IdentificativiFiscaliNoIVAType.factory()
            obj_.build(child_)
            self.IdentificativiFiscali = obj_
            obj_.original_tagname_ = 'IdentificativiFiscali'
        elif nodeName_ == 'AltriDatiIdentificativi':
            obj_ = AltriDatiIdentificativiNoCAPType.factory()
            obj_.build(child_)
            self.AltriDatiIdentificativi = obj_
            obj_.original_tagname_ = 'AltriDatiIdentificativi'
        elif nodeName_ == 'DatiFatturaBodyDTE':
            obj_ = DatiFatturaBodyDTEType.factory()
            obj_.build(child_)
            self.DatiFatturaBodyDTE.append(obj_)
            obj_.original_tagname_ = 'DatiFatturaBodyDTE'
# end class CessionarioCommittenteDTEType


class CessionarioCommittenteDTRType(GeneratedsSuper):
    """Blocco relativo ai dati del Cessionario / Committente"""
    subclass = None
    superclass = None
    def __init__(self, IdentificativiFiscali=None, AltriDatiIdentificativi=None):
        self.original_tagname_ = None
        self.IdentificativiFiscali = IdentificativiFiscali
        self.AltriDatiIdentificativi = AltriDatiIdentificativi
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CessionarioCommittenteDTRType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CessionarioCommittenteDTRType.subclass:
            return CessionarioCommittenteDTRType.subclass(*args_, **kwargs_)
        else:
            return CessionarioCommittenteDTRType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdentificativiFiscali(self): return self.IdentificativiFiscali
    def set_IdentificativiFiscali(self, IdentificativiFiscali): self.IdentificativiFiscali = IdentificativiFiscali
    def get_AltriDatiIdentificativi(self): return self.AltriDatiIdentificativi
    def set_AltriDatiIdentificativi(self, AltriDatiIdentificativi): self.AltriDatiIdentificativi = AltriDatiIdentificativi
    def hasContent_(self):
        if (
            self.IdentificativiFiscali is not None or
            self.AltriDatiIdentificativi is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CessionarioCommittenteDTRType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CessionarioCommittenteDTRType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CessionarioCommittenteDTRType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CessionarioCommittenteDTRType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CessionarioCommittenteDTRType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CessionarioCommittenteDTRType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentificativiFiscali is not None:
            self.IdentificativiFiscali.export(outfile, level, namespace_, name_='IdentificativiFiscali', pretty_print=pretty_print)
        if self.AltriDatiIdentificativi is not None:
            self.AltriDatiIdentificativi.export(outfile, level, namespace_, name_='AltriDatiIdentificativi', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdentificativiFiscali':
            obj_ = IdentificativiFiscaliITType.factory()
            obj_.build(child_)
            self.IdentificativiFiscali = obj_
            obj_.original_tagname_ = 'IdentificativiFiscali'
        elif nodeName_ == 'AltriDatiIdentificativi':
            obj_ = AltriDatiIdentificativiNoSedeType.factory()
            obj_.build(child_)
            self.AltriDatiIdentificativi = obj_
            obj_.original_tagname_ = 'AltriDatiIdentificativi'
# end class CessionarioCommittenteDTRType


class DatiFatturaBodyDTEType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DatiGenerali=None, DatiRiepilogo=None):
        self.original_tagname_ = None
        self.DatiGenerali = DatiGenerali
        if DatiRiepilogo is None:
            self.DatiRiepilogo = []
        else:
            self.DatiRiepilogo = DatiRiepilogo
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DatiFatturaBodyDTEType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DatiFatturaBodyDTEType.subclass:
            return DatiFatturaBodyDTEType.subclass(*args_, **kwargs_)
        else:
            return DatiFatturaBodyDTEType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DatiGenerali(self): return self.DatiGenerali
    def set_DatiGenerali(self, DatiGenerali): self.DatiGenerali = DatiGenerali
    def get_DatiRiepilogo(self): return self.DatiRiepilogo
    def set_DatiRiepilogo(self, DatiRiepilogo): self.DatiRiepilogo = DatiRiepilogo
    def add_DatiRiepilogo(self, value): self.DatiRiepilogo.append(value)
    def insert_DatiRiepilogo_at(self, index, value): self.DatiRiepilogo.insert(index, value)
    def replace_DatiRiepilogo_at(self, index, value): self.DatiRiepilogo[index] = value
    def hasContent_(self):
        if (
            self.DatiGenerali is not None or
            self.DatiRiepilogo
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DatiFatturaBodyDTEType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DatiFatturaBodyDTEType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DatiFatturaBodyDTEType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DatiFatturaBodyDTEType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DatiFatturaBodyDTEType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DatiFatturaBodyDTEType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DatiGenerali is not None:
            self.DatiGenerali.export(outfile, level, namespace_, name_='DatiGenerali', pretty_print=pretty_print)
        for DatiRiepilogo_ in self.DatiRiepilogo:
            DatiRiepilogo_.export(outfile, level, namespace_, name_='DatiRiepilogo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DatiGenerali':
            obj_ = DatiGeneraliType.factory()
            obj_.build(child_)
            self.DatiGenerali = obj_
            obj_.original_tagname_ = 'DatiGenerali'
        elif nodeName_ == 'DatiRiepilogo':
            obj_ = DatiRiepilogoType.factory()
            obj_.build(child_)
            self.DatiRiepilogo.append(obj_)
            obj_.original_tagname_ = 'DatiRiepilogo'
# end class DatiFatturaBodyDTEType


class DatiFatturaBodyDTRType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DatiGenerali=None, DatiRiepilogo=None):
        self.original_tagname_ = None
        self.DatiGenerali = DatiGenerali
        if DatiRiepilogo is None:
            self.DatiRiepilogo = []
        else:
            self.DatiRiepilogo = DatiRiepilogo
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DatiFatturaBodyDTRType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DatiFatturaBodyDTRType.subclass:
            return DatiFatturaBodyDTRType.subclass(*args_, **kwargs_)
        else:
            return DatiFatturaBodyDTRType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DatiGenerali(self): return self.DatiGenerali
    def set_DatiGenerali(self, DatiGenerali): self.DatiGenerali = DatiGenerali
    def get_DatiRiepilogo(self): return self.DatiRiepilogo
    def set_DatiRiepilogo(self, DatiRiepilogo): self.DatiRiepilogo = DatiRiepilogo
    def add_DatiRiepilogo(self, value): self.DatiRiepilogo.append(value)
    def insert_DatiRiepilogo_at(self, index, value): self.DatiRiepilogo.insert(index, value)
    def replace_DatiRiepilogo_at(self, index, value): self.DatiRiepilogo[index] = value
    def hasContent_(self):
        if (
            self.DatiGenerali is not None or
            self.DatiRiepilogo
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DatiFatturaBodyDTRType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DatiFatturaBodyDTRType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DatiFatturaBodyDTRType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DatiFatturaBodyDTRType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DatiFatturaBodyDTRType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DatiFatturaBodyDTRType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DatiGenerali is not None:
            self.DatiGenerali.export(outfile, level, namespace_, name_='DatiGenerali', pretty_print=pretty_print)
        for DatiRiepilogo_ in self.DatiRiepilogo:
            DatiRiepilogo_.export(outfile, level, namespace_, name_='DatiRiepilogo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DatiGenerali':
            obj_ = DatiGeneraliDTRType.factory()
            obj_.build(child_)
            self.DatiGenerali = obj_
            obj_.original_tagname_ = 'DatiGenerali'
        elif nodeName_ == 'DatiRiepilogo':
            obj_ = DatiRiepilogoType.factory()
            obj_.build(child_)
            self.DatiRiepilogo.append(obj_)
            obj_.original_tagname_ = 'DatiRiepilogo'
# end class DatiFatturaBodyDTRType


class RettificaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IdFile=None, Posizione=None):
        self.original_tagname_ = None
        self.IdFile = IdFile
        self.validate_String18Type(self.IdFile)
        self.Posizione = Posizione
        self.validate_PosizioneType(self.Posizione)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RettificaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RettificaType.subclass:
            return RettificaType.subclass(*args_, **kwargs_)
        else:
            return RettificaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdFile(self): return self.IdFile
    def set_IdFile(self, IdFile): self.IdFile = IdFile
    def get_Posizione(self): return self.Posizione
    def set_Posizione(self, Posizione): self.Posizione = Posizione
    def validate_String18Type(self, value):
        # Validate type String18Type, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_String18Type_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_String18Type_patterns_, ))
    validate_String18Type_patterns_ = [['^(\\p{IsBasicLatin}{1,18})$']]
    def validate_PosizioneType(self, value):
        # Validate type PosizioneType, a restriction on xs:integer.
        if value is not None and Validate_simpletypes_:
            if value < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on PosizioneType' % {"value" : value} )
            if value > 9999999:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on PosizioneType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.IdFile is not None or
            self.Posizione is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RettificaType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RettificaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RettificaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RettificaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RettificaType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RettificaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdFile is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdFile>%s</%sIdFile>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IdFile), input_name='IdFile')), namespace_, eol_))
        if self.Posizione is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosizione>%s</%sPosizione>%s' % (namespace_, self.gds_format_integer(self.Posizione, input_name='Posizione'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdFile':
            IdFile_ = child_.text
            IdFile_ = self.gds_validate_string(IdFile_, node, 'IdFile')
            self.IdFile = IdFile_
            # validate type String18Type
            self.validate_String18Type(self.IdFile)
        elif nodeName_ == 'Posizione':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Posizione')
            self.Posizione = ival_
            # validate type PosizioneType
            self.validate_PosizioneType(self.Posizione)
# end class RettificaType


class IdentificativiFiscaliType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IdFiscaleIVA=None, CodiceFiscale=None):
        self.original_tagname_ = None
        self.IdFiscaleIVA = IdFiscaleIVA
        self.CodiceFiscale = CodiceFiscale
        self.validate_CodiceFiscaleType(self.CodiceFiscale)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IdentificativiFiscaliType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IdentificativiFiscaliType.subclass:
            return IdentificativiFiscaliType.subclass(*args_, **kwargs_)
        else:
            return IdentificativiFiscaliType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdFiscaleIVA(self): return self.IdFiscaleIVA
    def set_IdFiscaleIVA(self, IdFiscaleIVA): self.IdFiscaleIVA = IdFiscaleIVA
    def get_CodiceFiscale(self): return self.CodiceFiscale
    def set_CodiceFiscale(self, CodiceFiscale): self.CodiceFiscale = CodiceFiscale
    def validate_CodiceFiscaleType(self, value):
        # Validate type CodiceFiscaleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CodiceFiscaleType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CodiceFiscaleType_patterns_, ))
    validate_CodiceFiscaleType_patterns_ = [['^[A-Z0-9]{11,16}$']]
    def hasContent_(self):
        if (
            self.IdFiscaleIVA is not None or
            self.CodiceFiscale is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='IdentificativiFiscaliType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IdentificativiFiscaliType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IdentificativiFiscaliType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='IdentificativiFiscaliType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IdentificativiFiscaliType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='IdentificativiFiscaliType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdFiscaleIVA is not None:
            self.IdFiscaleIVA.export(outfile, level, namespace_, name_='IdFiscaleIVA', pretty_print=pretty_print)
        if self.CodiceFiscale is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodiceFiscale>%s</%sCodiceFiscale>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CodiceFiscale), input_name='CodiceFiscale')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdFiscaleIVA':
            obj_ = IdFiscaleType.factory()
            obj_.build(child_)
            self.IdFiscaleIVA = obj_
            obj_.original_tagname_ = 'IdFiscaleIVA'
        elif nodeName_ == 'CodiceFiscale':
            CodiceFiscale_ = child_.text
            CodiceFiscale_ = self.gds_validate_string(CodiceFiscale_, node, 'CodiceFiscale')
            self.CodiceFiscale = CodiceFiscale_
            # validate type CodiceFiscaleType
            self.validate_CodiceFiscaleType(self.CodiceFiscale)
# end class IdentificativiFiscaliType


class IdentificativiFiscaliITType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IdFiscaleIVA=None, CodiceFiscale=None):
        self.original_tagname_ = None
        self.IdFiscaleIVA = IdFiscaleIVA
        self.CodiceFiscale = CodiceFiscale
        self.validate_CodiceFiscaleType(self.CodiceFiscale)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IdentificativiFiscaliITType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IdentificativiFiscaliITType.subclass:
            return IdentificativiFiscaliITType.subclass(*args_, **kwargs_)
        else:
            return IdentificativiFiscaliITType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdFiscaleIVA(self): return self.IdFiscaleIVA
    def set_IdFiscaleIVA(self, IdFiscaleIVA): self.IdFiscaleIVA = IdFiscaleIVA
    def get_CodiceFiscale(self): return self.CodiceFiscale
    def set_CodiceFiscale(self, CodiceFiscale): self.CodiceFiscale = CodiceFiscale
    def validate_CodiceFiscaleType(self, value):
        # Validate type CodiceFiscaleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CodiceFiscaleType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CodiceFiscaleType_patterns_, ))
    validate_CodiceFiscaleType_patterns_ = [['^[A-Z0-9]{11,16}$']]
    def hasContent_(self):
        if (
            self.IdFiscaleIVA is not None or
            self.CodiceFiscale is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='IdentificativiFiscaliITType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IdentificativiFiscaliITType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IdentificativiFiscaliITType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='IdentificativiFiscaliITType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IdentificativiFiscaliITType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='IdentificativiFiscaliITType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdFiscaleIVA is not None:
            self.IdFiscaleIVA.export(outfile, level, namespace_, name_='IdFiscaleIVA', pretty_print=pretty_print)
        if self.CodiceFiscale is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodiceFiscale>%s</%sCodiceFiscale>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CodiceFiscale), input_name='CodiceFiscale')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdFiscaleIVA':
            obj_ = IdFiscaleITType.factory()
            obj_.build(child_)
            self.IdFiscaleIVA = obj_
            obj_.original_tagname_ = 'IdFiscaleIVA'
        elif nodeName_ == 'CodiceFiscale':
            CodiceFiscale_ = child_.text
            CodiceFiscale_ = self.gds_validate_string(CodiceFiscale_, node, 'CodiceFiscale')
            self.CodiceFiscale = CodiceFiscale_
            # validate type CodiceFiscaleType
            self.validate_CodiceFiscaleType(self.CodiceFiscale)
# end class IdentificativiFiscaliITType


class IdentificativiFiscaliNoIVAType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IdFiscaleIVA=None, CodiceFiscale=None):
        self.original_tagname_ = None
        self.IdFiscaleIVA = IdFiscaleIVA
        self.CodiceFiscale = CodiceFiscale
        self.validate_CodiceFiscaleType(self.CodiceFiscale)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IdentificativiFiscaliNoIVAType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IdentificativiFiscaliNoIVAType.subclass:
            return IdentificativiFiscaliNoIVAType.subclass(*args_, **kwargs_)
        else:
            return IdentificativiFiscaliNoIVAType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdFiscaleIVA(self): return self.IdFiscaleIVA
    def set_IdFiscaleIVA(self, IdFiscaleIVA): self.IdFiscaleIVA = IdFiscaleIVA
    def get_CodiceFiscale(self): return self.CodiceFiscale
    def set_CodiceFiscale(self, CodiceFiscale): self.CodiceFiscale = CodiceFiscale
    def validate_CodiceFiscaleType(self, value):
        # Validate type CodiceFiscaleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CodiceFiscaleType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CodiceFiscaleType_patterns_, ))
    validate_CodiceFiscaleType_patterns_ = [['^[A-Z0-9]{11,16}$']]
    def hasContent_(self):
        if (
            self.IdFiscaleIVA is not None or
            self.CodiceFiscale is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='IdentificativiFiscaliNoIVAType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IdentificativiFiscaliNoIVAType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IdentificativiFiscaliNoIVAType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='IdentificativiFiscaliNoIVAType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IdentificativiFiscaliNoIVAType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='IdentificativiFiscaliNoIVAType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdFiscaleIVA is not None:
            self.IdFiscaleIVA.export(outfile, level, namespace_, name_='IdFiscaleIVA', pretty_print=pretty_print)
        if self.CodiceFiscale is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodiceFiscale>%s</%sCodiceFiscale>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CodiceFiscale), input_name='CodiceFiscale')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdFiscaleIVA':
            obj_ = IdFiscaleType.factory()
            obj_.build(child_)
            self.IdFiscaleIVA = obj_
            obj_.original_tagname_ = 'IdFiscaleIVA'
        elif nodeName_ == 'CodiceFiscale':
            CodiceFiscale_ = child_.text
            CodiceFiscale_ = self.gds_validate_string(CodiceFiscale_, node, 'CodiceFiscale')
            self.CodiceFiscale = CodiceFiscale_
            # validate type CodiceFiscaleType
            self.validate_CodiceFiscaleType(self.CodiceFiscale)
# end class IdentificativiFiscaliNoIVAType


class AltriDatiIdentificativiNoSedeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Denominazione=None, Nome=None, Cognome=None, Sede=None, StabileOrganizzazione=None, RappresentanteFiscale=None):
        self.original_tagname_ = None
        self.Denominazione = Denominazione
        self.validate_String80LatinType(self.Denominazione)
        self.Nome = Nome
        self.validate_String60LatinType(self.Nome)
        self.Cognome = Cognome
        self.validate_String60LatinType(self.Cognome)
        self.Sede = Sede
        self.StabileOrganizzazione = StabileOrganizzazione
        self.RappresentanteFiscale = RappresentanteFiscale
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AltriDatiIdentificativiNoSedeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AltriDatiIdentificativiNoSedeType.subclass:
            return AltriDatiIdentificativiNoSedeType.subclass(*args_, **kwargs_)
        else:
            return AltriDatiIdentificativiNoSedeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Denominazione(self): return self.Denominazione
    def set_Denominazione(self, Denominazione): self.Denominazione = Denominazione
    def get_Nome(self): return self.Nome
    def set_Nome(self, Nome): self.Nome = Nome
    def get_Cognome(self): return self.Cognome
    def set_Cognome(self, Cognome): self.Cognome = Cognome
    def get_Sede(self): return self.Sede
    def set_Sede(self, Sede): self.Sede = Sede
    def get_StabileOrganizzazione(self): return self.StabileOrganizzazione
    def set_StabileOrganizzazione(self, StabileOrganizzazione): self.StabileOrganizzazione = StabileOrganizzazione
    def get_RappresentanteFiscale(self): return self.RappresentanteFiscale
    def set_RappresentanteFiscale(self, RappresentanteFiscale): self.RappresentanteFiscale = RappresentanteFiscale
    def validate_String80LatinType(self, value):
        # Validate type String80LatinType, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_String80LatinType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_String80LatinType_patterns_, ))
    validate_String80LatinType_patterns_ = [['^[\\p{IsBasicLatin}\\p{[\x80-\xFF]}]{1,80}$']]
    def validate_String60LatinType(self, value):
        # Validate type String60LatinType, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_String60LatinType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_String60LatinType_patterns_, ))
    validate_String60LatinType_patterns_ = [['^[\\p{IsBasicLatin}\\p{[\x80-\xFF]}]{1,60}$']]
    def hasContent_(self):
        if (
            self.Denominazione is not None or
            self.Nome is not None or
            self.Cognome is not None or
            self.Sede is not None or
            self.StabileOrganizzazione is not None or
            self.RappresentanteFiscale is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AltriDatiIdentificativiNoSedeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AltriDatiIdentificativiNoSedeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AltriDatiIdentificativiNoSedeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AltriDatiIdentificativiNoSedeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AltriDatiIdentificativiNoSedeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AltriDatiIdentificativiNoSedeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Denominazione is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDenominazione>%s</%sDenominazione>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Denominazione), input_name='Denominazione')), namespace_, eol_))
        if self.Nome is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNome>%s</%sNome>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Nome), input_name='Nome')), namespace_, eol_))
        if self.Cognome is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCognome>%s</%sCognome>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Cognome), input_name='Cognome')), namespace_, eol_))
        if self.Sede is not None:
            self.Sede.export(outfile, level, namespace_, name_='Sede', pretty_print=pretty_print)
        if self.StabileOrganizzazione is not None:
            self.StabileOrganizzazione.export(outfile, level, namespace_, name_='StabileOrganizzazione', pretty_print=pretty_print)
        if self.RappresentanteFiscale is not None:
            self.RappresentanteFiscale.export(outfile, level, namespace_, name_='RappresentanteFiscale', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Denominazione':
            Denominazione_ = child_.text
            Denominazione_ = self.gds_validate_string(Denominazione_, node, 'Denominazione')
            self.Denominazione = Denominazione_
            # validate type String80LatinType
            self.validate_String80LatinType(self.Denominazione)
        elif nodeName_ == 'Nome':
            Nome_ = child_.text
            Nome_ = self.gds_validate_string(Nome_, node, 'Nome')
            self.Nome = Nome_
            # validate type String60LatinType
            self.validate_String60LatinType(self.Nome)
        elif nodeName_ == 'Cognome':
            Cognome_ = child_.text
            Cognome_ = self.gds_validate_string(Cognome_, node, 'Cognome')
            self.Cognome = Cognome_
            # validate type String60LatinType
            self.validate_String60LatinType(self.Cognome)
        elif nodeName_ == 'Sede':
            obj_ = IndirizzoType.factory()
            obj_.build(child_)
            self.Sede = obj_
            obj_.original_tagname_ = 'Sede'
        elif nodeName_ == 'StabileOrganizzazione':
            obj_ = IndirizzoType.factory()
            obj_.build(child_)
            self.StabileOrganizzazione = obj_
            obj_.original_tagname_ = 'StabileOrganizzazione'
        elif nodeName_ == 'RappresentanteFiscale':
            obj_ = RappresentanteFiscaleITType.factory()
            obj_.build(child_)
            self.RappresentanteFiscale = obj_
            obj_.original_tagname_ = 'RappresentanteFiscale'
# end class AltriDatiIdentificativiNoSedeType


class AltriDatiIdentificativiNoCAPType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Denominazione=None, Nome=None, Cognome=None, Sede=None, StabileOrganizzazione=None, RappresentanteFiscale=None):
        self.original_tagname_ = None
        self.Denominazione = Denominazione
        self.validate_String80LatinType(self.Denominazione)
        self.Nome = Nome
        self.validate_String60LatinType(self.Nome)
        self.Cognome = Cognome
        self.validate_String60LatinType(self.Cognome)
        self.Sede = Sede
        self.StabileOrganizzazione = StabileOrganizzazione
        self.RappresentanteFiscale = RappresentanteFiscale
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AltriDatiIdentificativiNoCAPType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AltriDatiIdentificativiNoCAPType.subclass:
            return AltriDatiIdentificativiNoCAPType.subclass(*args_, **kwargs_)
        else:
            return AltriDatiIdentificativiNoCAPType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Denominazione(self): return self.Denominazione
    def set_Denominazione(self, Denominazione): self.Denominazione = Denominazione
    def get_Nome(self): return self.Nome
    def set_Nome(self, Nome): self.Nome = Nome
    def get_Cognome(self): return self.Cognome
    def set_Cognome(self, Cognome): self.Cognome = Cognome
    def get_Sede(self): return self.Sede
    def set_Sede(self, Sede): self.Sede = Sede
    def get_StabileOrganizzazione(self): return self.StabileOrganizzazione
    def set_StabileOrganizzazione(self, StabileOrganizzazione): self.StabileOrganizzazione = StabileOrganizzazione
    def get_RappresentanteFiscale(self): return self.RappresentanteFiscale
    def set_RappresentanteFiscale(self, RappresentanteFiscale): self.RappresentanteFiscale = RappresentanteFiscale
    def validate_String80LatinType(self, value):
        # Validate type String80LatinType, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_String80LatinType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_String80LatinType_patterns_, ))
    validate_String80LatinType_patterns_ = [['^[\\p{IsBasicLatin}\\p{[\x80-\xFF]}]{1,80}$']]
    def validate_String60LatinType(self, value):
        # Validate type String60LatinType, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_String60LatinType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_String60LatinType_patterns_, ))
    validate_String60LatinType_patterns_ = [['^[\\p{IsBasicLatin}\\p{[\x80-\xFF]}]{1,60}$']]
    def hasContent_(self):
        if (
            self.Denominazione is not None or
            self.Nome is not None or
            self.Cognome is not None or
            self.Sede is not None or
            self.StabileOrganizzazione is not None or
            self.RappresentanteFiscale is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AltriDatiIdentificativiNoCAPType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AltriDatiIdentificativiNoCAPType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AltriDatiIdentificativiNoCAPType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AltriDatiIdentificativiNoCAPType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AltriDatiIdentificativiNoCAPType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AltriDatiIdentificativiNoCAPType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Denominazione is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDenominazione>%s</%sDenominazione>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Denominazione), input_name='Denominazione')), namespace_, eol_))
        if self.Nome is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNome>%s</%sNome>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Nome), input_name='Nome')), namespace_, eol_))
        if self.Cognome is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCognome>%s</%sCognome>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Cognome), input_name='Cognome')), namespace_, eol_))
        if self.Sede is not None:
            self.Sede.export(outfile, level, namespace_, name_='Sede', pretty_print=pretty_print)
        if self.StabileOrganizzazione is not None:
            self.StabileOrganizzazione.export(outfile, level, namespace_, name_='StabileOrganizzazione', pretty_print=pretty_print)
        if self.RappresentanteFiscale is not None:
            self.RappresentanteFiscale.export(outfile, level, namespace_, name_='RappresentanteFiscale', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Denominazione':
            Denominazione_ = child_.text
            Denominazione_ = self.gds_validate_string(Denominazione_, node, 'Denominazione')
            self.Denominazione = Denominazione_
            # validate type String80LatinType
            self.validate_String80LatinType(self.Denominazione)
        elif nodeName_ == 'Nome':
            Nome_ = child_.text
            Nome_ = self.gds_validate_string(Nome_, node, 'Nome')
            self.Nome = Nome_
            # validate type String60LatinType
            self.validate_String60LatinType(self.Nome)
        elif nodeName_ == 'Cognome':
            Cognome_ = child_.text
            Cognome_ = self.gds_validate_string(Cognome_, node, 'Cognome')
            self.Cognome = Cognome_
            # validate type String60LatinType
            self.validate_String60LatinType(self.Cognome)
        elif nodeName_ == 'Sede':
            obj_ = IndirizzoNoCAPType.factory()
            obj_.build(child_)
            self.Sede = obj_
            obj_.original_tagname_ = 'Sede'
        elif nodeName_ == 'StabileOrganizzazione':
            obj_ = IndirizzoType.factory()
            obj_.build(child_)
            self.StabileOrganizzazione = obj_
            obj_.original_tagname_ = 'StabileOrganizzazione'
        elif nodeName_ == 'RappresentanteFiscale':
            obj_ = RappresentanteFiscaleType.factory()
            obj_.build(child_)
            self.RappresentanteFiscale = obj_
            obj_.original_tagname_ = 'RappresentanteFiscale'
# end class AltriDatiIdentificativiNoCAPType


class IndirizzoNoCAPType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Indirizzo=None, NumeroCivico=None, CAP=None, Comune=None, Provincia=None, Nazione=None):
        self.original_tagname_ = None
        self.Indirizzo = Indirizzo
        self.validate_String60LatinType(self.Indirizzo)
        self.NumeroCivico = NumeroCivico
        self.validate_NumeroCivicoType(self.NumeroCivico)
        self.CAP = CAP
        self.validate_CAPType(self.CAP)
        self.Comune = Comune
        self.validate_String60LatinType(self.Comune)
        self.Provincia = Provincia
        self.validate_ProvinciaType(self.Provincia)
        self.Nazione = Nazione
        self.validate_NazioneType(self.Nazione)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndirizzoNoCAPType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndirizzoNoCAPType.subclass:
            return IndirizzoNoCAPType.subclass(*args_, **kwargs_)
        else:
            return IndirizzoNoCAPType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Indirizzo(self): return self.Indirizzo
    def set_Indirizzo(self, Indirizzo): self.Indirizzo = Indirizzo
    def get_NumeroCivico(self): return self.NumeroCivico
    def set_NumeroCivico(self, NumeroCivico): self.NumeroCivico = NumeroCivico
    def get_CAP(self): return self.CAP
    def set_CAP(self, CAP): self.CAP = CAP
    def get_Comune(self): return self.Comune
    def set_Comune(self, Comune): self.Comune = Comune
    def get_Provincia(self): return self.Provincia
    def set_Provincia(self, Provincia): self.Provincia = Provincia
    def get_Nazione(self): return self.Nazione
    def set_Nazione(self, Nazione): self.Nazione = Nazione
    def validate_String60LatinType(self, value):
        # Validate type String60LatinType, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_String60LatinType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_String60LatinType_patterns_, ))
    validate_String60LatinType_patterns_ = [['^[\\p{IsBasicLatin}\\p{[\x80-\xFF]}]{1,60}$']]
    def validate_NumeroCivicoType(self, value):
        # Validate type NumeroCivicoType, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_NumeroCivicoType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_NumeroCivicoType_patterns_, ))
    validate_NumeroCivicoType_patterns_ = [['^(\\p{IsBasicLatin}{1,8})$']]
    def validate_CAPType(self, value):
        # Validate type CAPType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CAPType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CAPType_patterns_, ))
    validate_CAPType_patterns_ = [['^[0-9][0-9][0-9][0-9][0-9]$']]
    def validate_ProvinciaType(self, value):
        # Validate type ProvinciaType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_ProvinciaType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_ProvinciaType_patterns_, ))
    validate_ProvinciaType_patterns_ = [['^[A-Z]{2}$']]
    def validate_NazioneType(self, value):
        # Validate type NazioneType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_NazioneType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_NazioneType_patterns_, ))
    validate_NazioneType_patterns_ = [['^[A-Z]{2}$']]
    def hasContent_(self):
        if (
            self.Indirizzo is not None or
            self.NumeroCivico is not None or
            self.CAP is not None or
            self.Comune is not None or
            self.Provincia is not None or
            self.Nazione is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='IndirizzoNoCAPType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndirizzoNoCAPType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IndirizzoNoCAPType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='IndirizzoNoCAPType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IndirizzoNoCAPType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='IndirizzoNoCAPType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Indirizzo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndirizzo>%s</%sIndirizzo>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Indirizzo), input_name='Indirizzo')), namespace_, eol_))
        if self.NumeroCivico is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeroCivico>%s</%sNumeroCivico>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NumeroCivico), input_name='NumeroCivico')), namespace_, eol_))
        if self.CAP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCAP>%s</%sCAP>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CAP), input_name='CAP')), namespace_, eol_))
        if self.Comune is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComune>%s</%sComune>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Comune), input_name='Comune')), namespace_, eol_))
        if self.Provincia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProvincia>%s</%sProvincia>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Provincia), input_name='Provincia')), namespace_, eol_))
        if self.Nazione is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNazione>%s</%sNazione>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Nazione), input_name='Nazione')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Indirizzo':
            Indirizzo_ = child_.text
            Indirizzo_ = self.gds_validate_string(Indirizzo_, node, 'Indirizzo')
            self.Indirizzo = Indirizzo_
            # validate type String60LatinType
            self.validate_String60LatinType(self.Indirizzo)
        elif nodeName_ == 'NumeroCivico':
            NumeroCivico_ = child_.text
            NumeroCivico_ = self.gds_validate_string(NumeroCivico_, node, 'NumeroCivico')
            self.NumeroCivico = NumeroCivico_
            # validate type NumeroCivicoType
            self.validate_NumeroCivicoType(self.NumeroCivico)
        elif nodeName_ == 'CAP':
            CAP_ = child_.text
            CAP_ = self.gds_validate_string(CAP_, node, 'CAP')
            self.CAP = CAP_
            # validate type CAPType
            self.validate_CAPType(self.CAP)
        elif nodeName_ == 'Comune':
            Comune_ = child_.text
            Comune_ = self.gds_validate_string(Comune_, node, 'Comune')
            self.Comune = Comune_
            # validate type String60LatinType
            self.validate_String60LatinType(self.Comune)
        elif nodeName_ == 'Provincia':
            Provincia_ = child_.text
            Provincia_ = self.gds_validate_string(Provincia_, node, 'Provincia')
            self.Provincia = Provincia_
            # validate type ProvinciaType
            self.validate_ProvinciaType(self.Provincia)
        elif nodeName_ == 'Nazione':
            Nazione_ = child_.text
            Nazione_ = self.gds_validate_string(Nazione_, node, 'Nazione')
            self.Nazione = Nazione_
            # validate type NazioneType
            self.validate_NazioneType(self.Nazione)
# end class IndirizzoNoCAPType


class IndirizzoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Indirizzo=None, NumeroCivico=None, CAP=None, Comune=None, Provincia=None, Nazione=None):
        self.original_tagname_ = None
        self.Indirizzo = Indirizzo
        self.validate_String60LatinType(self.Indirizzo)
        self.NumeroCivico = NumeroCivico
        self.validate_NumeroCivicoType(self.NumeroCivico)
        self.CAP = CAP
        self.validate_CAPType(self.CAP)
        self.Comune = Comune
        self.validate_String60LatinType(self.Comune)
        self.Provincia = Provincia
        self.validate_ProvinciaType(self.Provincia)
        self.Nazione = Nazione
        self.validate_NazioneType(self.Nazione)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndirizzoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndirizzoType.subclass:
            return IndirizzoType.subclass(*args_, **kwargs_)
        else:
            return IndirizzoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Indirizzo(self): return self.Indirizzo
    def set_Indirizzo(self, Indirizzo): self.Indirizzo = Indirizzo
    def get_NumeroCivico(self): return self.NumeroCivico
    def set_NumeroCivico(self, NumeroCivico): self.NumeroCivico = NumeroCivico
    def get_CAP(self): return self.CAP
    def set_CAP(self, CAP): self.CAP = CAP
    def get_Comune(self): return self.Comune
    def set_Comune(self, Comune): self.Comune = Comune
    def get_Provincia(self): return self.Provincia
    def set_Provincia(self, Provincia): self.Provincia = Provincia
    def get_Nazione(self): return self.Nazione
    def set_Nazione(self, Nazione): self.Nazione = Nazione
    def validate_String60LatinType(self, value):
        # Validate type String60LatinType, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_String60LatinType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_String60LatinType_patterns_, ))
    validate_String60LatinType_patterns_ = [['^[\\p{IsBasicLatin}\\p{[\x80-\xFF]}]{1,60}$']]
    def validate_NumeroCivicoType(self, value):
        # Validate type NumeroCivicoType, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_NumeroCivicoType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_NumeroCivicoType_patterns_, ))
    validate_NumeroCivicoType_patterns_ = [['^(\\p{IsBasicLatin}{1,8})$']]
    def validate_CAPType(self, value):
        # Validate type CAPType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_CAPType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_CAPType_patterns_, ))
    validate_CAPType_patterns_ = [['^[0-9][0-9][0-9][0-9][0-9]$']]
    def validate_ProvinciaType(self, value):
        # Validate type ProvinciaType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_ProvinciaType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_ProvinciaType_patterns_, ))
    validate_ProvinciaType_patterns_ = [['^[A-Z]{2}$']]
    def validate_NazioneType(self, value):
        # Validate type NazioneType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_NazioneType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_NazioneType_patterns_, ))
    validate_NazioneType_patterns_ = [['^[A-Z]{2}$']]
    def hasContent_(self):
        if (
            self.Indirizzo is not None or
            self.NumeroCivico is not None or
            self.CAP is not None or
            self.Comune is not None or
            self.Provincia is not None or
            self.Nazione is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='IndirizzoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndirizzoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IndirizzoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='IndirizzoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IndirizzoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='IndirizzoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Indirizzo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndirizzo>%s</%sIndirizzo>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Indirizzo), input_name='Indirizzo')), namespace_, eol_))
        if self.NumeroCivico is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeroCivico>%s</%sNumeroCivico>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NumeroCivico), input_name='NumeroCivico')), namespace_, eol_))
        if self.CAP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCAP>%s</%sCAP>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CAP), input_name='CAP')), namespace_, eol_))
        if self.Comune is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComune>%s</%sComune>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Comune), input_name='Comune')), namespace_, eol_))
        if self.Provincia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProvincia>%s</%sProvincia>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Provincia), input_name='Provincia')), namespace_, eol_))
        if self.Nazione is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNazione>%s</%sNazione>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Nazione), input_name='Nazione')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Indirizzo':
            Indirizzo_ = child_.text
            Indirizzo_ = self.gds_validate_string(Indirizzo_, node, 'Indirizzo')
            self.Indirizzo = Indirizzo_
            # validate type String60LatinType
            self.validate_String60LatinType(self.Indirizzo)
        elif nodeName_ == 'NumeroCivico':
            NumeroCivico_ = child_.text
            NumeroCivico_ = self.gds_validate_string(NumeroCivico_, node, 'NumeroCivico')
            self.NumeroCivico = NumeroCivico_
            # validate type NumeroCivicoType
            self.validate_NumeroCivicoType(self.NumeroCivico)
        elif nodeName_ == 'CAP':
            CAP_ = child_.text
            CAP_ = self.gds_validate_string(CAP_, node, 'CAP')
            self.CAP = CAP_
            # validate type CAPType
            self.validate_CAPType(self.CAP)
        elif nodeName_ == 'Comune':
            Comune_ = child_.text
            Comune_ = self.gds_validate_string(Comune_, node, 'Comune')
            self.Comune = Comune_
            # validate type String60LatinType
            self.validate_String60LatinType(self.Comune)
        elif nodeName_ == 'Provincia':
            Provincia_ = child_.text
            Provincia_ = self.gds_validate_string(Provincia_, node, 'Provincia')
            self.Provincia = Provincia_
            # validate type ProvinciaType
            self.validate_ProvinciaType(self.Provincia)
        elif nodeName_ == 'Nazione':
            Nazione_ = child_.text
            Nazione_ = self.gds_validate_string(Nazione_, node, 'Nazione')
            self.Nazione = Nazione_
            # validate type NazioneType
            self.validate_NazioneType(self.Nazione)
# end class IndirizzoType


class RappresentanteFiscaleType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IdFiscaleIVA=None, Denominazione=None, Nome=None, Cognome=None):
        self.original_tagname_ = None
        self.IdFiscaleIVA = IdFiscaleIVA
        self.Denominazione = Denominazione
        self.validate_String80LatinType(self.Denominazione)
        self.Nome = Nome
        self.validate_String60LatinType(self.Nome)
        self.Cognome = Cognome
        self.validate_String60LatinType(self.Cognome)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RappresentanteFiscaleType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RappresentanteFiscaleType.subclass:
            return RappresentanteFiscaleType.subclass(*args_, **kwargs_)
        else:
            return RappresentanteFiscaleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdFiscaleIVA(self): return self.IdFiscaleIVA
    def set_IdFiscaleIVA(self, IdFiscaleIVA): self.IdFiscaleIVA = IdFiscaleIVA
    def get_Denominazione(self): return self.Denominazione
    def set_Denominazione(self, Denominazione): self.Denominazione = Denominazione
    def get_Nome(self): return self.Nome
    def set_Nome(self, Nome): self.Nome = Nome
    def get_Cognome(self): return self.Cognome
    def set_Cognome(self, Cognome): self.Cognome = Cognome
    def validate_String80LatinType(self, value):
        # Validate type String80LatinType, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_String80LatinType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_String80LatinType_patterns_, ))
    validate_String80LatinType_patterns_ = [['^[\\p{IsBasicLatin}\\p{[\x80-\xFF]}]{1,80}$']]
    def validate_String60LatinType(self, value):
        # Validate type String60LatinType, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_String60LatinType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_String60LatinType_patterns_, ))
    validate_String60LatinType_patterns_ = [['^[\\p{IsBasicLatin}\\p{[\x80-\xFF]}]{1,60}$']]
    def hasContent_(self):
        if (
            self.IdFiscaleIVA is not None or
            self.Denominazione is not None or
            self.Nome is not None or
            self.Cognome is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RappresentanteFiscaleType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RappresentanteFiscaleType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RappresentanteFiscaleType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RappresentanteFiscaleType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RappresentanteFiscaleType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RappresentanteFiscaleType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdFiscaleIVA is not None:
            self.IdFiscaleIVA.export(outfile, level, namespace_, name_='IdFiscaleIVA', pretty_print=pretty_print)
        if self.Denominazione is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDenominazione>%s</%sDenominazione>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Denominazione), input_name='Denominazione')), namespace_, eol_))
        if self.Nome is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNome>%s</%sNome>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Nome), input_name='Nome')), namespace_, eol_))
        if self.Cognome is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCognome>%s</%sCognome>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Cognome), input_name='Cognome')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdFiscaleIVA':
            obj_ = IdFiscaleType.factory()
            obj_.build(child_)
            self.IdFiscaleIVA = obj_
            obj_.original_tagname_ = 'IdFiscaleIVA'
        elif nodeName_ == 'Denominazione':
            Denominazione_ = child_.text
            Denominazione_ = self.gds_validate_string(Denominazione_, node, 'Denominazione')
            self.Denominazione = Denominazione_
            # validate type String80LatinType
            self.validate_String80LatinType(self.Denominazione)
        elif nodeName_ == 'Nome':
            Nome_ = child_.text
            Nome_ = self.gds_validate_string(Nome_, node, 'Nome')
            self.Nome = Nome_
            # validate type String60LatinType
            self.validate_String60LatinType(self.Nome)
        elif nodeName_ == 'Cognome':
            Cognome_ = child_.text
            Cognome_ = self.gds_validate_string(Cognome_, node, 'Cognome')
            self.Cognome = Cognome_
            # validate type String60LatinType
            self.validate_String60LatinType(self.Cognome)
# end class RappresentanteFiscaleType


class RappresentanteFiscaleITType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IdFiscaleIVA=None, Denominazione=None, Nome=None, Cognome=None):
        self.original_tagname_ = None
        self.IdFiscaleIVA = IdFiscaleIVA
        self.Denominazione = Denominazione
        self.validate_String80LatinType(self.Denominazione)
        self.Nome = Nome
        self.validate_String60LatinType(self.Nome)
        self.Cognome = Cognome
        self.validate_String60LatinType(self.Cognome)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RappresentanteFiscaleITType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RappresentanteFiscaleITType.subclass:
            return RappresentanteFiscaleITType.subclass(*args_, **kwargs_)
        else:
            return RappresentanteFiscaleITType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdFiscaleIVA(self): return self.IdFiscaleIVA
    def set_IdFiscaleIVA(self, IdFiscaleIVA): self.IdFiscaleIVA = IdFiscaleIVA
    def get_Denominazione(self): return self.Denominazione
    def set_Denominazione(self, Denominazione): self.Denominazione = Denominazione
    def get_Nome(self): return self.Nome
    def set_Nome(self, Nome): self.Nome = Nome
    def get_Cognome(self): return self.Cognome
    def set_Cognome(self, Cognome): self.Cognome = Cognome
    def validate_String80LatinType(self, value):
        # Validate type String80LatinType, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_String80LatinType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_String80LatinType_patterns_, ))
    validate_String80LatinType_patterns_ = [['^[\\p{IsBasicLatin}\\p{[\x80-\xFF]}]{1,80}$']]
    def validate_String60LatinType(self, value):
        # Validate type String60LatinType, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_String60LatinType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_String60LatinType_patterns_, ))
    validate_String60LatinType_patterns_ = [['^[\\p{IsBasicLatin}\\p{[\x80-\xFF]}]{1,60}$']]
    def hasContent_(self):
        if (
            self.IdFiscaleIVA is not None or
            self.Denominazione is not None or
            self.Nome is not None or
            self.Cognome is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RappresentanteFiscaleITType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RappresentanteFiscaleITType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RappresentanteFiscaleITType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RappresentanteFiscaleITType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RappresentanteFiscaleITType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RappresentanteFiscaleITType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdFiscaleIVA is not None:
            self.IdFiscaleIVA.export(outfile, level, namespace_, name_='IdFiscaleIVA', pretty_print=pretty_print)
        if self.Denominazione is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDenominazione>%s</%sDenominazione>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Denominazione), input_name='Denominazione')), namespace_, eol_))
        if self.Nome is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNome>%s</%sNome>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Nome), input_name='Nome')), namespace_, eol_))
        if self.Cognome is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCognome>%s</%sCognome>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Cognome), input_name='Cognome')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdFiscaleIVA':
            obj_ = IdFiscaleITIvaType.factory()
            obj_.build(child_)
            self.IdFiscaleIVA = obj_
            obj_.original_tagname_ = 'IdFiscaleIVA'
        elif nodeName_ == 'Denominazione':
            Denominazione_ = child_.text
            Denominazione_ = self.gds_validate_string(Denominazione_, node, 'Denominazione')
            self.Denominazione = Denominazione_
            # validate type String80LatinType
            self.validate_String80LatinType(self.Denominazione)
        elif nodeName_ == 'Nome':
            Nome_ = child_.text
            Nome_ = self.gds_validate_string(Nome_, node, 'Nome')
            self.Nome = Nome_
            # validate type String60LatinType
            self.validate_String60LatinType(self.Nome)
        elif nodeName_ == 'Cognome':
            Cognome_ = child_.text
            Cognome_ = self.gds_validate_string(Cognome_, node, 'Cognome')
            self.Cognome = Cognome_
            # validate type String60LatinType
            self.validate_String60LatinType(self.Cognome)
# end class RappresentanteFiscaleITType


class DatiGeneraliType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TipoDocumento=None, Data=None, Numero=None):
        self.original_tagname_ = None
        self.TipoDocumento = TipoDocumento
        self.validate_TipoDocumentoType(self.TipoDocumento)
        if isinstance(Data, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Data, '%Y-%m-%d').date()
        else:
            initvalue_ = Data
        self.Data = initvalue_
        self.Numero = Numero
        self.validate_String20Type(self.Numero)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DatiGeneraliType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DatiGeneraliType.subclass:
            return DatiGeneraliType.subclass(*args_, **kwargs_)
        else:
            return DatiGeneraliType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TipoDocumento(self): return self.TipoDocumento
    def set_TipoDocumento(self, TipoDocumento): self.TipoDocumento = TipoDocumento
    def get_Data(self): return self.Data
    def set_Data(self, Data): self.Data = Data
    def get_Numero(self): return self.Numero
    def set_Numero(self, Numero): self.Numero = Numero
    def validate_TipoDocumentoType(self, value):
        # Validate type TipoDocumentoType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['TD01', 'TD04', 'TD05', 'TD07', 'TD08', 'TD10', 'TD11']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TipoDocumentoType' % {"value" : value.encode("utf-8")} )
            if len(value) != 4:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on TipoDocumentoType' % {"value" : value.encode("utf-8")} )
    def validate_DataFatturaType(self, value):
        # Validate type DataFatturaType, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            if value < self.gds_parse_date('1970-01-01'):
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on DataFatturaType' % {"value" : value} )
    def validate_String20Type(self, value):
        # Validate type String20Type, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_String20Type_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_String20Type_patterns_, ))
    validate_String20Type_patterns_ = [['^(\\p{IsBasicLatin}{1,20})$']]
    def hasContent_(self):
        if (
            self.TipoDocumento is not None or
            self.Data is not None or
            self.Numero is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DatiGeneraliType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DatiGeneraliType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DatiGeneraliType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DatiGeneraliType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DatiGeneraliType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DatiGeneraliType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TipoDocumento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTipoDocumento>%s</%sTipoDocumento>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TipoDocumento), input_name='TipoDocumento')), namespace_, eol_))
        if self.Data is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sData>%s</%sData>%s' % (namespace_, self.gds_format_date(self.Data, input_name='Data'), namespace_, eol_))
        if self.Numero is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumero>%s</%sNumero>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Numero), input_name='Numero')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TipoDocumento':
            TipoDocumento_ = child_.text
            TipoDocumento_ = self.gds_validate_string(TipoDocumento_, node, 'TipoDocumento')
            self.TipoDocumento = TipoDocumento_
            # validate type TipoDocumentoType
            self.validate_TipoDocumentoType(self.TipoDocumento)
        elif nodeName_ == 'Data':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Data = dval_
            # validate type DataFatturaType
            self.validate_DataFatturaType(self.Data)
        elif nodeName_ == 'Numero':
            Numero_ = child_.text
            Numero_ = self.gds_validate_string(Numero_, node, 'Numero')
            self.Numero = Numero_
            # validate type String20Type
            self.validate_String20Type(self.Numero)
# end class DatiGeneraliType


class DatiGeneraliDTRType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TipoDocumento=None, Data=None, Numero=None, DataRegistrazione=None):
        self.original_tagname_ = None
        self.TipoDocumento = TipoDocumento
        self.validate_TipoDocumentoType(self.TipoDocumento)
        if isinstance(Data, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Data, '%Y-%m-%d').date()
        else:
            initvalue_ = Data
        self.Data = initvalue_
        self.Numero = Numero
        self.validate_String20Type(self.Numero)
        if isinstance(DataRegistrazione, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataRegistrazione, '%Y-%m-%d').date()
        else:
            initvalue_ = DataRegistrazione
        self.DataRegistrazione = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DatiGeneraliDTRType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DatiGeneraliDTRType.subclass:
            return DatiGeneraliDTRType.subclass(*args_, **kwargs_)
        else:
            return DatiGeneraliDTRType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TipoDocumento(self): return self.TipoDocumento
    def set_TipoDocumento(self, TipoDocumento): self.TipoDocumento = TipoDocumento
    def get_Data(self): return self.Data
    def set_Data(self, Data): self.Data = Data
    def get_Numero(self): return self.Numero
    def set_Numero(self, Numero): self.Numero = Numero
    def get_DataRegistrazione(self): return self.DataRegistrazione
    def set_DataRegistrazione(self, DataRegistrazione): self.DataRegistrazione = DataRegistrazione
    def validate_TipoDocumentoType(self, value):
        # Validate type TipoDocumentoType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['TD01', 'TD04', 'TD05', 'TD07', 'TD08', 'TD10', 'TD11']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TipoDocumentoType' % {"value" : value.encode("utf-8")} )
            if len(value) != 4:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on TipoDocumentoType' % {"value" : value.encode("utf-8")} )
    def validate_DataFatturaType(self, value):
        # Validate type DataFatturaType, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            if value < self.gds_parse_date('1970-01-01'):
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on DataFatturaType' % {"value" : value} )
    def validate_String20Type(self, value):
        # Validate type String20Type, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_String20Type_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_String20Type_patterns_, ))
    validate_String20Type_patterns_ = [['^(\\p{IsBasicLatin}{1,20})$']]
    def hasContent_(self):
        if (
            self.TipoDocumento is not None or
            self.Data is not None or
            self.Numero is not None or
            self.DataRegistrazione is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DatiGeneraliDTRType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DatiGeneraliDTRType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DatiGeneraliDTRType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DatiGeneraliDTRType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DatiGeneraliDTRType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DatiGeneraliDTRType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TipoDocumento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTipoDocumento>%s</%sTipoDocumento>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TipoDocumento), input_name='TipoDocumento')), namespace_, eol_))
        if self.Data is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sData>%s</%sData>%s' % (namespace_, self.gds_format_date(self.Data, input_name='Data'), namespace_, eol_))
        if self.Numero is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumero>%s</%sNumero>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Numero), input_name='Numero')), namespace_, eol_))
        if self.DataRegistrazione is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataRegistrazione>%s</%sDataRegistrazione>%s' % (namespace_, self.gds_format_date(self.DataRegistrazione, input_name='DataRegistrazione'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TipoDocumento':
            TipoDocumento_ = child_.text
            TipoDocumento_ = self.gds_validate_string(TipoDocumento_, node, 'TipoDocumento')
            self.TipoDocumento = TipoDocumento_
            # validate type TipoDocumentoType
            self.validate_TipoDocumentoType(self.TipoDocumento)
        elif nodeName_ == 'Data':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Data = dval_
            # validate type DataFatturaType
            self.validate_DataFatturaType(self.Data)
        elif nodeName_ == 'Numero':
            Numero_ = child_.text
            Numero_ = self.gds_validate_string(Numero_, node, 'Numero')
            self.Numero = Numero_
            # validate type String20Type
            self.validate_String20Type(self.Numero)
        elif nodeName_ == 'DataRegistrazione':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DataRegistrazione = dval_
            # validate type DataFatturaType
            self.validate_DataFatturaType(self.DataRegistrazione)
# end class DatiGeneraliDTRType


class DatiRiepilogoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ImponibileImporto=None, DatiIVA=None, Natura=None, Detraibile=None, Deducibile=None, EsigibilitaIVA=None):
        self.original_tagname_ = None
        self.ImponibileImporto = ImponibileImporto
        self.validate_Amount2DecimalType(self.ImponibileImporto)
        self.DatiIVA = DatiIVA
        self.Natura = Natura
        self.validate_NaturaType(self.Natura)
        self.Detraibile = Detraibile
        self.validate_RateType(self.Detraibile)
        self.Deducibile = Deducibile
        self.validate_DeducibileType(self.Deducibile)
        self.EsigibilitaIVA = EsigibilitaIVA
        self.validate_EsigibilitaIVAType(self.EsigibilitaIVA)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DatiRiepilogoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DatiRiepilogoType.subclass:
            return DatiRiepilogoType.subclass(*args_, **kwargs_)
        else:
            return DatiRiepilogoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ImponibileImporto(self): return self.ImponibileImporto
    def set_ImponibileImporto(self, ImponibileImporto): self.ImponibileImporto = ImponibileImporto
    def get_DatiIVA(self): return self.DatiIVA
    def set_DatiIVA(self, DatiIVA): self.DatiIVA = DatiIVA
    def get_Natura(self): return self.Natura
    def set_Natura(self, Natura): self.Natura = Natura
    def get_Detraibile(self): return self.Detraibile
    def set_Detraibile(self, Detraibile): self.Detraibile = Detraibile
    def get_Deducibile(self): return self.Deducibile
    def set_Deducibile(self, Deducibile): self.Deducibile = Deducibile
    def get_EsigibilitaIVA(self): return self.EsigibilitaIVA
    def set_EsigibilitaIVA(self, EsigibilitaIVA): self.EsigibilitaIVA = EsigibilitaIVA
    def validate_Amount2DecimalType(self, value):
        # Validate type Amount2DecimalType, a restriction on xs:decimal.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Amount2DecimalType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_Amount2DecimalType_patterns_, ))
    validate_Amount2DecimalType_patterns_ = [['^[\\-]?[0-9]{1,11}\\.[0-9]{2}$']]
    def validate_NaturaType(self, value):
        # Validate type NaturaType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['N1', 'N2', 'N3', 'N4', 'N5', 'N6', 'N7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NaturaType' % {"value" : value.encode("utf-8")} )
    def validate_RateType(self, value):
        # Validate type RateType, a restriction on xs:decimal.
        if value is not None and Validate_simpletypes_:
            if value > 100.00:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on RateType' % {"value" : value} )
            if not self.gds_validate_simple_patterns(
                    self.validate_RateType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_RateType_patterns_, ))
    validate_RateType_patterns_ = [['^[0-9]{1,3}\\.[0-9]{2}$']]
    def validate_DeducibileType(self, value):
        # Validate type DeducibileType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['SI']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on DeducibileType' % {"value" : value.encode("utf-8")} )
            if len(value) != 2:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on DeducibileType' % {"value" : value.encode("utf-8")} )
    def validate_EsigibilitaIVAType(self, value):
        # Validate type EsigibilitaIVAType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['D', 'I', 'S']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EsigibilitaIVAType' % {"value" : value.encode("utf-8")} )
            if len(value) > 1:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on EsigibilitaIVAType' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on EsigibilitaIVAType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ImponibileImporto is not None or
            self.DatiIVA is not None or
            self.Natura is not None or
            self.Detraibile is not None or
            self.Deducibile is not None or
            self.EsigibilitaIVA is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DatiRiepilogoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DatiRiepilogoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DatiRiepilogoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DatiRiepilogoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DatiRiepilogoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DatiRiepilogoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ImponibileImporto is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImponibileImporto>%s</%sImponibileImporto>%s' % (namespace_, self.gds_format_float(self.ImponibileImporto, input_name='ImponibileImporto'), namespace_, eol_))
        if self.DatiIVA is not None:
            self.DatiIVA.export(outfile, level, namespace_, name_='DatiIVA', pretty_print=pretty_print)
        if self.Natura is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNatura>%s</%sNatura>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Natura), input_name='Natura')), namespace_, eol_))
        if self.Detraibile is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDetraibile>%s</%sDetraibile>%s' % (namespace_, self.gds_format_float(self.Detraibile, input_name='Detraibile'), namespace_, eol_))
        if self.Deducibile is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeducibile>%s</%sDeducibile>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.Deducibile), input_name='Deducibile')), namespace_, eol_))
        if self.EsigibilitaIVA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEsigibilitaIVA>%s</%sEsigibilitaIVA>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EsigibilitaIVA), input_name='EsigibilitaIVA')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ImponibileImporto':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ImponibileImporto')
            self.ImponibileImporto = fval_
            # validate type Amount2DecimalType
            self.validate_Amount2DecimalType(self.ImponibileImporto)
        elif nodeName_ == 'DatiIVA':
            obj_ = DatiIVAType.factory()
            obj_.build(child_)
            self.DatiIVA = obj_
            obj_.original_tagname_ = 'DatiIVA'
        elif nodeName_ == 'Natura':
            Natura_ = child_.text
            Natura_ = self.gds_validate_string(Natura_, node, 'Natura')
            self.Natura = Natura_
            # validate type NaturaType
            self.validate_NaturaType(self.Natura)
        elif nodeName_ == 'Detraibile':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Detraibile')
            self.Detraibile = fval_
            # validate type RateType
            self.validate_RateType(self.Detraibile)
        elif nodeName_ == 'Deducibile':
            Deducibile_ = child_.text
            Deducibile_ = self.gds_validate_string(Deducibile_, node, 'Deducibile')
            self.Deducibile = Deducibile_
            # validate type DeducibileType
            self.validate_DeducibileType(self.Deducibile)
        elif nodeName_ == 'EsigibilitaIVA':
            EsigibilitaIVA_ = child_.text
            EsigibilitaIVA_ = self.gds_validate_string(EsigibilitaIVA_, node, 'EsigibilitaIVA')
            self.EsigibilitaIVA = EsigibilitaIVA_
            # validate type EsigibilitaIVAType
            self.validate_EsigibilitaIVAType(self.EsigibilitaIVA)
# end class DatiRiepilogoType


class DatiIVAType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Imposta=None, Aliquota=None):
        self.original_tagname_ = None
        self.Imposta = Imposta
        self.validate_Amount2DecimalType(self.Imposta)
        self.Aliquota = Aliquota
        self.validate_RateType(self.Aliquota)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DatiIVAType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DatiIVAType.subclass:
            return DatiIVAType.subclass(*args_, **kwargs_)
        else:
            return DatiIVAType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Imposta(self): return self.Imposta
    def set_Imposta(self, Imposta): self.Imposta = Imposta
    def get_Aliquota(self): return self.Aliquota
    def set_Aliquota(self, Aliquota): self.Aliquota = Aliquota
    def validate_Amount2DecimalType(self, value):
        # Validate type Amount2DecimalType, a restriction on xs:decimal.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Amount2DecimalType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_Amount2DecimalType_patterns_, ))
    validate_Amount2DecimalType_patterns_ = [['^[\\-]?[0-9]{1,11}\\.[0-9]{2}$']]
    def validate_RateType(self, value):
        # Validate type RateType, a restriction on xs:decimal.
        if value is not None and Validate_simpletypes_:
            if value > 100.00:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on RateType' % {"value" : value} )
            if not self.gds_validate_simple_patterns(
                    self.validate_RateType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_RateType_patterns_, ))
    validate_RateType_patterns_ = [['^[0-9]{1,3}\\.[0-9]{2}$']]
    def hasContent_(self):
        if (
            self.Imposta is not None or
            self.Aliquota is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DatiIVAType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DatiIVAType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DatiIVAType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DatiIVAType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DatiIVAType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DatiIVAType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Imposta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImposta>%s</%sImposta>%s' % (namespace_, self.gds_format_float(self.Imposta, input_name='Imposta'), namespace_, eol_))
        if self.Aliquota is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAliquota>%s</%sAliquota>%s' % (namespace_, self.gds_format_float(self.Aliquota, input_name='Aliquota'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Imposta':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Imposta')
            self.Imposta = fval_
            # validate type Amount2DecimalType
            self.validate_Amount2DecimalType(self.Imposta)
        elif nodeName_ == 'Aliquota':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Aliquota')
            self.Aliquota = fval_
            # validate type RateType
            self.validate_RateType(self.Aliquota)
# end class DatiIVAType


class IdFiscaleType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IdPaese=None, IdCodice=None):
        self.original_tagname_ = None
        self.IdPaese = IdPaese
        self.validate_NazioneType(self.IdPaese)
        self.IdCodice = IdCodice
        self.validate_CodiceType(self.IdCodice)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IdFiscaleType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IdFiscaleType.subclass:
            return IdFiscaleType.subclass(*args_, **kwargs_)
        else:
            return IdFiscaleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdPaese(self): return self.IdPaese
    def set_IdPaese(self, IdPaese): self.IdPaese = IdPaese
    def get_IdCodice(self): return self.IdCodice
    def set_IdCodice(self, IdCodice): self.IdCodice = IdCodice
    def validate_NazioneType(self, value):
        # Validate type NazioneType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_NazioneType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_NazioneType_patterns_, ))
    validate_NazioneType_patterns_ = [['^[A-Z]{2}$']]
    def validate_CodiceType(self, value):
        # Validate type CodiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 28:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CodiceType' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on CodiceType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.IdPaese is not None or
            self.IdCodice is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='IdFiscaleType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IdFiscaleType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IdFiscaleType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='IdFiscaleType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IdFiscaleType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='IdFiscaleType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdPaese is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdPaese>%s</%sIdPaese>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IdPaese), input_name='IdPaese')), namespace_, eol_))
        if self.IdCodice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdCodice>%s</%sIdCodice>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IdCodice), input_name='IdCodice')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdPaese':
            IdPaese_ = child_.text
            IdPaese_ = self.gds_validate_string(IdPaese_, node, 'IdPaese')
            self.IdPaese = IdPaese_
            # validate type NazioneType
            self.validate_NazioneType(self.IdPaese)
        elif nodeName_ == 'IdCodice':
            IdCodice_ = child_.text
            IdCodice_ = self.gds_validate_string(IdCodice_, node, 'IdCodice')
            self.IdCodice = IdCodice_
            # validate type CodiceType
            self.validate_CodiceType(self.IdCodice)
# end class IdFiscaleType


class IdFiscaleITType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IdPaese=None, IdCodice=None):
        self.original_tagname_ = None
        self.IdPaese = IdPaese
        self.validate_NazioneITType(self.IdPaese)
        self.IdCodice = IdCodice
        self.validate_CodiceType(self.IdCodice)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IdFiscaleITType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IdFiscaleITType.subclass:
            return IdFiscaleITType.subclass(*args_, **kwargs_)
        else:
            return IdFiscaleITType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdPaese(self): return self.IdPaese
    def set_IdPaese(self, IdPaese): self.IdPaese = IdPaese
    def get_IdCodice(self): return self.IdCodice
    def set_IdCodice(self, IdCodice): self.IdCodice = IdCodice
    def validate_NazioneITType(self, value):
        # Validate type NazioneITType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['IT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NazioneITType' % {"value" : value.encode("utf-8")} )
            if len(value) != 2:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on NazioneITType' % {"value" : value.encode("utf-8")} )
    def validate_CodiceType(self, value):
        # Validate type CodiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 28:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CodiceType' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on CodiceType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.IdPaese is not None or
            self.IdCodice is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='IdFiscaleITType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IdFiscaleITType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IdFiscaleITType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='IdFiscaleITType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IdFiscaleITType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='IdFiscaleITType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdPaese is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdPaese>%s</%sIdPaese>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IdPaese), input_name='IdPaese')), namespace_, eol_))
        if self.IdCodice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdCodice>%s</%sIdCodice>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IdCodice), input_name='IdCodice')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdPaese':
            IdPaese_ = child_.text
            IdPaese_ = self.gds_validate_string(IdPaese_, node, 'IdPaese')
            self.IdPaese = IdPaese_
            # validate type NazioneITType
            self.validate_NazioneITType(self.IdPaese)
        elif nodeName_ == 'IdCodice':
            IdCodice_ = child_.text
            IdCodice_ = self.gds_validate_string(IdCodice_, node, 'IdCodice')
            self.IdCodice = IdCodice_
            # validate type CodiceType
            self.validate_CodiceType(self.IdCodice)
# end class IdFiscaleITType


class IdFiscaleITIvaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IdPaese=None, IdCodice=None):
        self.original_tagname_ = None
        self.IdPaese = IdPaese
        self.validate_NazioneITType(self.IdPaese)
        self.IdCodice = IdCodice
        self.validate_CodiceIvaType(self.IdCodice)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IdFiscaleITIvaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IdFiscaleITIvaType.subclass:
            return IdFiscaleITIvaType.subclass(*args_, **kwargs_)
        else:
            return IdFiscaleITIvaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdPaese(self): return self.IdPaese
    def set_IdPaese(self, IdPaese): self.IdPaese = IdPaese
    def get_IdCodice(self): return self.IdCodice
    def set_IdCodice(self, IdCodice): self.IdCodice = IdCodice
    def validate_NazioneITType(self, value):
        # Validate type NazioneITType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['IT']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on NazioneITType' % {"value" : value.encode("utf-8")} )
            if len(value) != 2:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on NazioneITType' % {"value" : value.encode("utf-8")} )
    def validate_CodiceIvaType(self, value):
        # Validate type CodiceIvaType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 11:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on CodiceIvaType' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on CodiceIvaType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.IdPaese is not None or
            self.IdCodice is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='IdFiscaleITIvaType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IdFiscaleITIvaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IdFiscaleITIvaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='IdFiscaleITIvaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IdFiscaleITIvaType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='IdFiscaleITIvaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdPaese is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdPaese>%s</%sIdPaese>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IdPaese), input_name='IdPaese')), namespace_, eol_))
        if self.IdCodice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdCodice>%s</%sIdCodice>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IdCodice), input_name='IdCodice')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdPaese':
            IdPaese_ = child_.text
            IdPaese_ = self.gds_validate_string(IdPaese_, node, 'IdPaese')
            self.IdPaese = IdPaese_
            # validate type NazioneITType
            self.validate_NazioneITType(self.IdPaese)
        elif nodeName_ == 'IdCodice':
            IdCodice_ = child_.text
            IdCodice_ = self.gds_validate_string(IdCodice_, node, 'IdCodice')
            self.IdCodice = IdCodice_
            # validate type CodiceIvaType
            self.validate_CodiceIvaType(self.IdCodice)
# end class IdFiscaleITIvaType


class SignatureType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignedInfo=None, SignatureValue=None, KeyInfo=None, Object=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.SignedInfo = SignedInfo
        self.SignatureValue = SignatureValue
        self.KeyInfo = KeyInfo
        if Object is None:
            self.Object = []
        else:
            self.Object = Object
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureType.subclass:
            return SignatureType.subclass(*args_, **kwargs_)
        else:
            return SignatureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SignedInfo(self): return self.SignedInfo
    def set_SignedInfo(self, SignedInfo): self.SignedInfo = SignedInfo
    def get_SignatureValue(self): return self.SignatureValue
    def set_SignatureValue(self, SignatureValue): self.SignatureValue = SignatureValue
    def get_KeyInfo(self): return self.KeyInfo
    def set_KeyInfo(self, KeyInfo): self.KeyInfo = KeyInfo
    def get_Object(self): return self.Object
    def set_Object(self, Object): self.Object = Object
    def add_Object(self, value): self.Object.append(value)
    def insert_Object_at(self, index, value): self.Object.insert(index, value)
    def replace_Object_at(self, index, value): self.Object[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.SignedInfo is not None or
            self.SignatureValue is not None or
            self.KeyInfo is not None or
            self.Object
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SignatureType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SignatureType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignatureType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignatureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SignedInfo is not None:
            self.SignedInfo.export(outfile, level, namespace_='ds:', name_='SignedInfo', pretty_print=pretty_print)
        if self.SignatureValue is not None:
            self.SignatureValue.export(outfile, level, namespace_='ds:', name_='SignatureValue', pretty_print=pretty_print)
        if self.KeyInfo is not None:
            self.KeyInfo.export(outfile, level, namespace_='ds:', name_='KeyInfo', pretty_print=pretty_print)
        for Object_ in self.Object:
            Object_.export(outfile, level, namespace_='ds:', name_='Object', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignedInfo':
            obj_ = SignedInfoType.factory()
            obj_.build(child_)
            self.SignedInfo = obj_
            obj_.original_tagname_ = 'SignedInfo'
        elif nodeName_ == 'SignatureValue':
            obj_ = SignatureValueType.factory()
            obj_.build(child_)
            self.SignatureValue = obj_
            obj_.original_tagname_ = 'SignatureValue'
        elif nodeName_ == 'KeyInfo':
            obj_ = KeyInfoType.factory()
            obj_.build(child_)
            self.KeyInfo = obj_
            obj_.original_tagname_ = 'KeyInfo'
        elif nodeName_ == 'Object':
            obj_ = ObjectType.factory()
            obj_.build(child_)
            self.Object.append(obj_)
            obj_.original_tagname_ = 'Object'
# end class SignatureType


class SignatureValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, valueOf_=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureValueType.subclass:
            return SignatureValueType.subclass(*args_, **kwargs_)
        else:
            return SignatureValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SignatureValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureValueType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SignatureValueType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignatureValueType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignatureValueType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SignatureValueType


class SignedInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, CanonicalizationMethod=None, SignatureMethod=None, Reference=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.CanonicalizationMethod = CanonicalizationMethod
        self.SignatureMethod = SignatureMethod
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignedInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignedInfoType.subclass:
            return SignedInfoType.subclass(*args_, **kwargs_)
        else:
            return SignedInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CanonicalizationMethod(self): return self.CanonicalizationMethod
    def set_CanonicalizationMethod(self, CanonicalizationMethod): self.CanonicalizationMethod = CanonicalizationMethod
    def get_SignatureMethod(self): return self.SignatureMethod
    def set_SignatureMethod(self, SignatureMethod): self.SignatureMethod = SignatureMethod
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.CanonicalizationMethod is not None or
            self.SignatureMethod is not None or
            self.Reference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SignedInfoType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignedInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignedInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SignedInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignedInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignedInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CanonicalizationMethod is not None:
            self.CanonicalizationMethod.export(outfile, level, namespace_='ds:', name_='CanonicalizationMethod', pretty_print=pretty_print)
        if self.SignatureMethod is not None:
            self.SignatureMethod.export(outfile, level, namespace_='ds:', name_='SignatureMethod', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_='ds:', name_='Reference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CanonicalizationMethod':
            obj_ = CanonicalizationMethodType.factory()
            obj_.build(child_)
            self.CanonicalizationMethod = obj_
            obj_.original_tagname_ = 'CanonicalizationMethod'
        elif nodeName_ == 'SignatureMethod':
            obj_ = SignatureMethodType.factory()
            obj_.build(child_)
            self.SignatureMethod = obj_
            obj_.original_tagname_ = 'SignatureMethod'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
# end class SignedInfoType


class CanonicalizationMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CanonicalizationMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CanonicalizationMethodType.subclass:
            return CanonicalizationMethodType.subclass(*args_, **kwargs_)
        else:
            return CanonicalizationMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ or
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CanonicalizationMethodType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CanonicalizationMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CanonicalizationMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CanonicalizationMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CanonicalizationMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CanonicalizationMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class CanonicalizationMethodType


class SignatureMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, HMACOutputLength=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.HMACOutputLength = HMACOutputLength
        self.validate_HMACOutputLengthType(self.HMACOutputLength)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureMethodType.subclass:
            return SignatureMethodType.subclass(*args_, **kwargs_)
        else:
            return SignatureMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HMACOutputLength(self): return self.HMACOutputLength
    def set_HMACOutputLength(self, HMACOutputLength): self.HMACOutputLength = HMACOutputLength
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_HMACOutputLengthType(self, value):
        # Validate type HMACOutputLengthType, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.HMACOutputLength is not None or
            self.anytypeobjs_ or
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SignatureMethodType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SignatureMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignatureMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignatureMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HMACOutputLength' and child_.text is not None:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeInteger, 'HMACOutputLength', ival_)
            self.content_.append(obj_)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SignatureMethodType


class ReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, URI=None, Type=None, Transforms=None, DigestMethod=None, DigestValue=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.URI = _cast(None, URI)
        self.Type = _cast(None, Type)
        self.Transforms = Transforms
        self.DigestMethod = DigestMethod
        self.DigestValue = DigestValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType.subclass:
            return ReferenceType.subclass(*args_, **kwargs_)
        else:
            return ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transforms(self): return self.Transforms
    def set_Transforms(self, Transforms): self.Transforms = Transforms
    def get_DigestMethod(self): return self.DigestMethod
    def set_DigestMethod(self, DigestMethod): self.DigestMethod = DigestMethod
    def get_DigestValue(self): return self.DigestValue
    def set_DigestValue(self, DigestValue): self.DigestValue = DigestValue
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_URI(self): return self.URI
    def set_URI(self, URI): self.URI = URI
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def hasContent_(self):
        if (
            self.Transforms is not None or
            self.DigestMethod is not None or
            self.DigestValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ReferenceType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReferenceType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            outfile.write(' URI=%s' % (quote_attrib(self.URI), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            self.Transforms.export(outfile, level, namespace_='ds:', name_='Transforms', pretty_print=pretty_print)
        if self.DigestMethod is not None:
            self.DigestMethod.export(outfile, level, namespace_='ds:', name_='DigestMethod', pretty_print=pretty_print)
        if self.DigestValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDigestValue>%s</%sDigestValue>%s' % (namespace_, self.gds_format_base64(self.DigestValue, input_name='DigestValue'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            self.URI = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory()
            obj_.build(child_)
            self.Transforms = obj_
            obj_.original_tagname_ = 'Transforms'
        elif nodeName_ == 'DigestMethod':
            obj_ = DigestMethodType.factory()
            obj_.build(child_)
            self.DigestMethod = obj_
            obj_.original_tagname_ = 'DigestMethod'
        elif nodeName_ == 'DigestValue':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'DigestValue')
            else:
                bval_ = None
            self.DigestValue = bval_
# end class ReferenceType


class TransformsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Transform=None):
        self.original_tagname_ = None
        if Transform is None:
            self.Transform = []
        else:
            self.Transform = Transform
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransformsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransformsType.subclass:
            return TransformsType.subclass(*args_, **kwargs_)
        else:
            return TransformsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transform(self): return self.Transform
    def set_Transform(self, Transform): self.Transform = Transform
    def add_Transform(self, value): self.Transform.append(value)
    def insert_Transform_at(self, index, value): self.Transform.insert(index, value)
    def replace_Transform_at(self, index, value): self.Transform[index] = value
    def hasContent_(self):
        if (
            self.Transform
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TransformsType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransformsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransformsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TransformsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TransformsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TransformsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Transform_ in self.Transform:
            Transform_.export(outfile, level, namespace_='ds:', name_='Transform', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transform':
            obj_ = TransformType.factory()
            obj_.build(child_)
            self.Transform.append(obj_)
            obj_.original_tagname_ = 'Transform'
# end class TransformsType


class TransformType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, XPath=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.anytypeobjs_ = anytypeobjs_
        if XPath is None:
            self.XPath = []
        else:
            self.XPath = XPath
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransformType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransformType.subclass:
            return TransformType.subclass(*args_, **kwargs_)
        else:
            return TransformType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_XPath(self): return self.XPath
    def set_XPath(self, XPath): self.XPath = XPath
    def add_XPath(self, value): self.XPath.append(value)
    def insert_XPath_at(self, index, value): self.XPath.insert(index, value)
    def replace_XPath_at(self, index, value): self.XPath[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            self.XPath or
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TransformType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransformType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransformType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TransformType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TransformType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespace_='', name_='TransformType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        elif nodeName_ == 'XPath' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'XPath', valuestr_)
            self.content_.append(obj_)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class TransformType


class DigestMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DigestMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DigestMethodType.subclass:
            return DigestMethodType.subclass(*args_, **kwargs_)
        else:
            return DigestMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ or
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DigestMethodType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DigestMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DigestMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DigestMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DigestMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespace_='', name_='DigestMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class DigestMethodType


class KeyInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, KeyName=None, KeyValue=None, RetrievalMethod=None, X509Data=None, PGPData=None, SPKIData=None, MgmtData=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        if KeyName is None:
            self.KeyName = []
        else:
            self.KeyName = KeyName
        if KeyValue is None:
            self.KeyValue = []
        else:
            self.KeyValue = KeyValue
        if RetrievalMethod is None:
            self.RetrievalMethod = []
        else:
            self.RetrievalMethod = RetrievalMethod
        if X509Data is None:
            self.X509Data = []
        else:
            self.X509Data = X509Data
        if PGPData is None:
            self.PGPData = []
        else:
            self.PGPData = PGPData
        if SPKIData is None:
            self.SPKIData = []
        else:
            self.SPKIData = SPKIData
        if MgmtData is None:
            self.MgmtData = []
        else:
            self.MgmtData = MgmtData
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, KeyInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if KeyInfoType.subclass:
            return KeyInfoType.subclass(*args_, **kwargs_)
        else:
            return KeyInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_KeyName(self): return self.KeyName
    def set_KeyName(self, KeyName): self.KeyName = KeyName
    def add_KeyName(self, value): self.KeyName.append(value)
    def insert_KeyName_at(self, index, value): self.KeyName.insert(index, value)
    def replace_KeyName_at(self, index, value): self.KeyName[index] = value
    def get_KeyValue(self): return self.KeyValue
    def set_KeyValue(self, KeyValue): self.KeyValue = KeyValue
    def add_KeyValue(self, value): self.KeyValue.append(value)
    def insert_KeyValue_at(self, index, value): self.KeyValue.insert(index, value)
    def replace_KeyValue_at(self, index, value): self.KeyValue[index] = value
    def get_RetrievalMethod(self): return self.RetrievalMethod
    def set_RetrievalMethod(self, RetrievalMethod): self.RetrievalMethod = RetrievalMethod
    def add_RetrievalMethod(self, value): self.RetrievalMethod.append(value)
    def insert_RetrievalMethod_at(self, index, value): self.RetrievalMethod.insert(index, value)
    def replace_RetrievalMethod_at(self, index, value): self.RetrievalMethod[index] = value
    def get_X509Data(self): return self.X509Data
    def set_X509Data(self, X509Data): self.X509Data = X509Data
    def add_X509Data(self, value): self.X509Data.append(value)
    def insert_X509Data_at(self, index, value): self.X509Data.insert(index, value)
    def replace_X509Data_at(self, index, value): self.X509Data[index] = value
    def get_PGPData(self): return self.PGPData
    def set_PGPData(self, PGPData): self.PGPData = PGPData
    def add_PGPData(self, value): self.PGPData.append(value)
    def insert_PGPData_at(self, index, value): self.PGPData.insert(index, value)
    def replace_PGPData_at(self, index, value): self.PGPData[index] = value
    def get_SPKIData(self): return self.SPKIData
    def set_SPKIData(self, SPKIData): self.SPKIData = SPKIData
    def add_SPKIData(self, value): self.SPKIData.append(value)
    def insert_SPKIData_at(self, index, value): self.SPKIData.insert(index, value)
    def replace_SPKIData_at(self, index, value): self.SPKIData[index] = value
    def get_MgmtData(self): return self.MgmtData
    def set_MgmtData(self, MgmtData): self.MgmtData = MgmtData
    def add_MgmtData(self, value): self.MgmtData.append(value)
    def insert_MgmtData_at(self, index, value): self.MgmtData.insert(index, value)
    def replace_MgmtData_at(self, index, value): self.MgmtData[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.KeyName or
            self.KeyValue or
            self.RetrievalMethod or
            self.X509Data or
            self.PGPData or
            self.SPKIData or
            self.MgmtData or
            self.anytypeobjs_ is not None or
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='KeyInfoType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('KeyInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='KeyInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='KeyInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='KeyInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='', name_='KeyInfoType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'KeyName' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'KeyName', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'KeyValue':
            obj_ = KeyValue.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'KeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_KeyValue'):
              self.add_KeyValue(obj_.value)
            elif hasattr(self, 'set_KeyValue'):
              self.set_KeyValue(obj_.value)
        elif nodeName_ == 'RetrievalMethod':
            obj_ = RetrievalMethod.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'RetrievalMethod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_RetrievalMethod'):
              self.add_RetrievalMethod(obj_.value)
            elif hasattr(self, 'set_RetrievalMethod'):
              self.set_RetrievalMethod(obj_.value)
        elif nodeName_ == 'X509Data':
            obj_ = X509Data.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'X509Data', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_X509Data'):
              self.add_X509Data(obj_.value)
            elif hasattr(self, 'set_X509Data'):
              self.set_X509Data(obj_.value)
        elif nodeName_ == 'PGPData':
            obj_ = PGPData.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'PGPData', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_PGPData'):
              self.add_PGPData(obj_.value)
            elif hasattr(self, 'set_PGPData'):
              self.set_PGPData(obj_.value)
        elif nodeName_ == 'SPKIData':
            obj_ = SPKIData.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'SPKIData', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_SPKIData'):
              self.add_SPKIData(obj_.value)
            elif hasattr(self, 'set_SPKIData'):
              self.set_SPKIData(obj_.value)
        elif nodeName_ == 'MgmtData' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'MgmtData', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class KeyInfoType


class KeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DSAKeyValue=None, RSAKeyValue=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.DSAKeyValue = DSAKeyValue
        self.RSAKeyValue = RSAKeyValue
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, KeyValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if KeyValueType.subclass:
            return KeyValueType.subclass(*args_, **kwargs_)
        else:
            return KeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DSAKeyValue(self): return self.DSAKeyValue
    def set_DSAKeyValue(self, DSAKeyValue): self.DSAKeyValue = DSAKeyValue
    def get_RSAKeyValue(self): return self.RSAKeyValue
    def set_RSAKeyValue(self, RSAKeyValue): self.RSAKeyValue = RSAKeyValue
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.DSAKeyValue is not None or
            self.RSAKeyValue is not None or
            self.anytypeobjs_ is not None or
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='KeyValueType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('KeyValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='KeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='KeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='KeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='KeyValueType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DSAKeyValue':
            obj_ = DSAKeyValue.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'DSAKeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_DSAKeyValue'):
              self.add_DSAKeyValue(obj_.value)
            elif hasattr(self, 'set_DSAKeyValue'):
              self.set_DSAKeyValue(obj_.value)
        elif nodeName_ == 'RSAKeyValue':
            obj_ = RSAKeyValue.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'RSAKeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_RSAKeyValue'):
              self.add_RSAKeyValue(obj_.value)
            elif hasattr(self, 'set_RSAKeyValue'):
              self.set_RSAKeyValue(obj_.value)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class KeyValueType


class RetrievalMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, URI=None, Type=None, Transforms=None):
        self.original_tagname_ = None
        self.URI = _cast(None, URI)
        self.Type = _cast(None, Type)
        self.Transforms = Transforms
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RetrievalMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RetrievalMethodType.subclass:
            return RetrievalMethodType.subclass(*args_, **kwargs_)
        else:
            return RetrievalMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transforms(self): return self.Transforms
    def set_Transforms(self, Transforms): self.Transforms = Transforms
    def get_URI(self): return self.URI
    def set_URI(self, URI): self.URI = URI
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def hasContent_(self):
        if (
            self.Transforms is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RetrievalMethodType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RetrievalMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RetrievalMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RetrievalMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RetrievalMethodType'):
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            outfile.write(' URI=%s' % (quote_attrib(self.URI), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
    def exportChildren(self, outfile, level, namespace_='', name_='RetrievalMethodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            self.Transforms.export(outfile, level, namespace_='ds:', name_='Transforms', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            self.URI = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory()
            obj_.build(child_)
            self.Transforms = obj_
            obj_.original_tagname_ = 'Transforms'
# end class RetrievalMethodType


class X509DataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, X509IssuerSerial=None, X509SKI=None, X509SubjectName=None, X509Certificate=None, X509CRL=None, anytypeobjs_=None):
        self.original_tagname_ = None
        if X509IssuerSerial is None:
            self.X509IssuerSerial = []
        else:
            self.X509IssuerSerial = X509IssuerSerial
        if X509SKI is None:
            self.X509SKI = []
        else:
            self.X509SKI = X509SKI
        if X509SubjectName is None:
            self.X509SubjectName = []
        else:
            self.X509SubjectName = X509SubjectName
        if X509Certificate is None:
            self.X509Certificate = []
        else:
            self.X509Certificate = X509Certificate
        if X509CRL is None:
            self.X509CRL = []
        else:
            self.X509CRL = X509CRL
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, X509DataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if X509DataType.subclass:
            return X509DataType.subclass(*args_, **kwargs_)
        else:
            return X509DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_X509IssuerSerial(self): return self.X509IssuerSerial
    def set_X509IssuerSerial(self, X509IssuerSerial): self.X509IssuerSerial = X509IssuerSerial
    def add_X509IssuerSerial(self, value): self.X509IssuerSerial.append(value)
    def insert_X509IssuerSerial_at(self, index, value): self.X509IssuerSerial.insert(index, value)
    def replace_X509IssuerSerial_at(self, index, value): self.X509IssuerSerial[index] = value
    def get_X509SKI(self): return self.X509SKI
    def set_X509SKI(self, X509SKI): self.X509SKI = X509SKI
    def add_X509SKI(self, value): self.X509SKI.append(value)
    def insert_X509SKI_at(self, index, value): self.X509SKI.insert(index, value)
    def replace_X509SKI_at(self, index, value): self.X509SKI[index] = value
    def get_X509SubjectName(self): return self.X509SubjectName
    def set_X509SubjectName(self, X509SubjectName): self.X509SubjectName = X509SubjectName
    def add_X509SubjectName(self, value): self.X509SubjectName.append(value)
    def insert_X509SubjectName_at(self, index, value): self.X509SubjectName.insert(index, value)
    def replace_X509SubjectName_at(self, index, value): self.X509SubjectName[index] = value
    def get_X509Certificate(self): return self.X509Certificate
    def set_X509Certificate(self, X509Certificate): self.X509Certificate = X509Certificate
    def add_X509Certificate(self, value): self.X509Certificate.append(value)
    def insert_X509Certificate_at(self, index, value): self.X509Certificate.insert(index, value)
    def replace_X509Certificate_at(self, index, value): self.X509Certificate[index] = value
    def get_X509CRL(self): return self.X509CRL
    def set_X509CRL(self, X509CRL): self.X509CRL = X509CRL
    def add_X509CRL(self, value): self.X509CRL.append(value)
    def insert_X509CRL_at(self, index, value): self.X509CRL.insert(index, value)
    def replace_X509CRL_at(self, index, value): self.X509CRL[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def hasContent_(self):
        if (
            self.X509IssuerSerial or
            self.X509SKI or
            self.X509SubjectName or
            self.X509Certificate or
            self.X509CRL or
            self.anytypeobjs_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='X509DataType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('X509DataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='X509DataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='X509DataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='X509DataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='X509DataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for X509IssuerSerial_ in self.X509IssuerSerial:
            X509IssuerSerial_.export(outfile, level, namespace_, name_='X509IssuerSerial', pretty_print=pretty_print)
        for X509SKI_ in self.X509SKI:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509SKI>%s</%sX509SKI>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(X509SKI_), input_name='X509SKI')), namespace_, eol_))
        for X509SubjectName_ in self.X509SubjectName:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509SubjectName>%s</%sX509SubjectName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(X509SubjectName_), input_name='X509SubjectName')), namespace_, eol_))
        for X509Certificate_ in self.X509Certificate:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509Certificate>%s</%sX509Certificate>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(X509Certificate_), input_name='X509Certificate')), namespace_, eol_))
        for X509CRL_ in self.X509CRL:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509CRL>%s</%sX509CRL>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(X509CRL_), input_name='X509CRL')), namespace_, eol_))
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509IssuerSerial':
            obj_ = X509IssuerSerialType.factory()
            obj_.build(child_)
            self.X509IssuerSerial.append(obj_)
            obj_.original_tagname_ = 'X509IssuerSerial'
        elif nodeName_ == 'X509SKI':
            X509SKI_ = child_.text
            X509SKI_ = self.gds_validate_string(X509SKI_, node, 'X509SKI')
            self.X509SKI.append(X509SKI_)
        elif nodeName_ == 'X509SubjectName':
            X509SubjectName_ = child_.text
            X509SubjectName_ = self.gds_validate_string(X509SubjectName_, node, 'X509SubjectName')
            self.X509SubjectName.append(X509SubjectName_)
        elif nodeName_ == 'X509Certificate':
            X509Certificate_ = child_.text
            X509Certificate_ = self.gds_validate_string(X509Certificate_, node, 'X509Certificate')
            self.X509Certificate.append(X509Certificate_)
        elif nodeName_ == 'X509CRL':
            X509CRL_ = child_.text
            X509CRL_ = self.gds_validate_string(X509CRL_, node, 'X509CRL')
            self.X509CRL.append(X509CRL_)
        else:
            obj_ = self.gds_build_any(child_, 'X509DataType')
            if obj_ is not None:
                self.set_anytypeobjs_(obj_)
# end class X509DataType


class X509IssuerSerialType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, X509IssuerName=None, X509SerialNumber=None):
        self.original_tagname_ = None
        self.X509IssuerName = X509IssuerName
        self.X509SerialNumber = X509SerialNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, X509IssuerSerialType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if X509IssuerSerialType.subclass:
            return X509IssuerSerialType.subclass(*args_, **kwargs_)
        else:
            return X509IssuerSerialType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_X509IssuerName(self): return self.X509IssuerName
    def set_X509IssuerName(self, X509IssuerName): self.X509IssuerName = X509IssuerName
    def get_X509SerialNumber(self): return self.X509SerialNumber
    def set_X509SerialNumber(self, X509SerialNumber): self.X509SerialNumber = X509SerialNumber
    def hasContent_(self):
        if (
            self.X509IssuerName is not None or
            self.X509SerialNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='X509IssuerSerialType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('X509IssuerSerialType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='X509IssuerSerialType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='X509IssuerSerialType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='X509IssuerSerialType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='X509IssuerSerialType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.X509IssuerName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509IssuerName>%s</%sX509IssuerName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.X509IssuerName), input_name='X509IssuerName')), namespace_, eol_))
        if self.X509SerialNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509SerialNumber>%s</%sX509SerialNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.X509SerialNumber), input_name='X509SerialNumber')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509IssuerName':
            X509IssuerName_ = child_.text
            X509IssuerName_ = self.gds_validate_string(X509IssuerName_, node, 'X509IssuerName')
            self.X509IssuerName = X509IssuerName_
        elif nodeName_ == 'X509SerialNumber':
            X509SerialNumber_ = child_.text
            X509SerialNumber_ = self.gds_validate_string(X509SerialNumber_, node, 'X509SerialNumber')
            self.X509SerialNumber = X509SerialNumber_
# end class X509IssuerSerialType


class PGPDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PGPKeyID=None, PGPKeyPacket=None, anytypeobjs_=None):
        self.original_tagname_ = None
        self.PGPKeyID = PGPKeyID
        self.PGPKeyPacket = PGPKeyPacket
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PGPDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PGPDataType.subclass:
            return PGPDataType.subclass(*args_, **kwargs_)
        else:
            return PGPDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PGPKeyID(self): return self.PGPKeyID
    def set_PGPKeyID(self, PGPKeyID): self.PGPKeyID = PGPKeyID
    def get_PGPKeyPacket(self): return self.PGPKeyPacket
    def set_PGPKeyPacket(self, PGPKeyPacket): self.PGPKeyPacket = PGPKeyPacket
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.PGPKeyID is not None or
            self.PGPKeyPacket is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PGPDataType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PGPDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PGPDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PGPDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PGPDataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PGPDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PGPKeyID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPGPKeyID>%s</%sPGPKeyID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PGPKeyID), input_name='PGPKeyID')), namespace_, eol_))
        if self.PGPKeyPacket is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPGPKeyPacket>%s</%sPGPKeyPacket>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PGPKeyPacket), input_name='PGPKeyPacket')), namespace_, eol_))
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PGPKeyID':
            PGPKeyID_ = child_.text
            PGPKeyID_ = self.gds_validate_string(PGPKeyID_, node, 'PGPKeyID')
            self.PGPKeyID = PGPKeyID_
        elif nodeName_ == 'PGPKeyPacket':
            PGPKeyPacket_ = child_.text
            PGPKeyPacket_ = self.gds_validate_string(PGPKeyPacket_, node, 'PGPKeyPacket')
            self.PGPKeyPacket = PGPKeyPacket_
        else:
            obj_ = self.gds_build_any(child_, 'PGPDataType')
            if obj_ is not None:
                self.add_anytypeobjs_(obj_)
# end class PGPDataType


class SPKIDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SPKISexp=None, anytypeobjs_=None):
        self.original_tagname_ = None
        if SPKISexp is None:
            self.SPKISexp = []
        else:
            self.SPKISexp = SPKISexp
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SPKIDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SPKIDataType.subclass:
            return SPKIDataType.subclass(*args_, **kwargs_)
        else:
            return SPKIDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SPKISexp(self): return self.SPKISexp
    def set_SPKISexp(self, SPKISexp): self.SPKISexp = SPKISexp
    def add_SPKISexp(self, value): self.SPKISexp.append(value)
    def insert_SPKISexp_at(self, index, value): self.SPKISexp.insert(index, value)
    def replace_SPKISexp_at(self, index, value): self.SPKISexp[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def hasContent_(self):
        if (
            self.SPKISexp or
            self.anytypeobjs_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SPKIDataType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SPKIDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SPKIDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SPKIDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SPKIDataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SPKIDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SPKISexp_ in self.SPKISexp:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSPKISexp>%s</%sSPKISexp>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(SPKISexp_), input_name='SPKISexp')), namespace_, eol_))
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SPKISexp':
            SPKISexp_ = child_.text
            SPKISexp_ = self.gds_validate_string(SPKISexp_, node, 'SPKISexp')
            self.SPKISexp.append(SPKISexp_)
        else:
            obj_ = self.gds_build_any(child_, 'SPKIDataType')
            if obj_ is not None:
                self.set_anytypeobjs_(obj_)
# end class SPKIDataType


class ObjectType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, MimeType=None, Encoding=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.MimeType = _cast(None, MimeType)
        self.Encoding = _cast(None, Encoding)
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ObjectType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ObjectType.subclass:
            return ObjectType.subclass(*args_, **kwargs_)
        else:
            return ObjectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_MimeType(self): return self.MimeType
    def set_MimeType(self, MimeType): self.MimeType = MimeType
    def get_Encoding(self): return self.Encoding
    def set_Encoding(self, Encoding): self.Encoding = Encoding
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ObjectType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ObjectType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ObjectType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ObjectType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ObjectType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
        if self.MimeType is not None and 'MimeType' not in already_processed:
            already_processed.add('MimeType')
            outfile.write(' MimeType=%s' % (quote_attrib(self.MimeType), ))
        if self.Encoding is not None and 'Encoding' not in already_processed:
            already_processed.add('Encoding')
            outfile.write(' Encoding=%s' % (quote_attrib(self.Encoding), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ObjectType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('MimeType', node)
        if value is not None and 'MimeType' not in already_processed:
            already_processed.add('MimeType')
            self.MimeType = value
        value = find_attr_value_('Encoding', node)
        if value is not None and 'Encoding' not in already_processed:
            already_processed.add('Encoding')
            self.Encoding = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class ObjectType


class ManifestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Reference=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ManifestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ManifestType.subclass:
            return ManifestType.subclass(*args_, **kwargs_)
        else:
            return ManifestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.Reference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ManifestType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ManifestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ManifestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ManifestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ManifestType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ManifestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_='ds:', name_='Reference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
# end class ManifestType


class SignaturePropertiesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignatureProperty=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        if SignatureProperty is None:
            self.SignatureProperty = []
        else:
            self.SignatureProperty = SignatureProperty
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignaturePropertiesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignaturePropertiesType.subclass:
            return SignaturePropertiesType.subclass(*args_, **kwargs_)
        else:
            return SignaturePropertiesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SignatureProperty(self): return self.SignatureProperty
    def set_SignatureProperty(self, SignatureProperty): self.SignatureProperty = SignatureProperty
    def add_SignatureProperty(self, value): self.SignatureProperty.append(value)
    def insert_SignatureProperty_at(self, index, value): self.SignatureProperty.insert(index, value)
    def replace_SignatureProperty_at(self, index, value): self.SignatureProperty[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.SignatureProperty
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SignaturePropertiesType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignaturePropertiesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignaturePropertiesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SignaturePropertiesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignaturePropertiesType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignaturePropertiesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SignatureProperty_ in self.SignatureProperty:
            SignatureProperty_.export(outfile, level, namespace_='ds:', name_='SignatureProperty', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignatureProperty':
            obj_ = SignaturePropertyType.factory()
            obj_.build(child_)
            self.SignatureProperty.append(obj_)
            obj_.original_tagname_ = 'SignatureProperty'
# end class SignaturePropertiesType


class SignaturePropertyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Target=None, Id=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Target = _cast(None, Target)
        self.Id = _cast(None, Id)
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignaturePropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignaturePropertyType.subclass:
            return SignaturePropertyType.subclass(*args_, **kwargs_)
        else:
            return SignaturePropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Target(self): return self.Target
    def set_Target(self, Target): self.Target = Target
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            1 if type(self.valueOf_) in [int,float] else self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SignaturePropertyType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignaturePropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignaturePropertyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SignaturePropertyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignaturePropertyType'):
        if self.Target is not None and 'Target' not in already_processed:
            already_processed.add('Target')
            outfile.write(' Target=%s' % (quote_attrib(self.Target), ))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignaturePropertyType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Target', node)
        if value is not None and 'Target' not in already_processed:
            already_processed.add('Target')
            self.Target = value
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SignaturePropertyType


class DSAKeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, P=None, Q=None, G=None, Y=None, J=None, Seed=None, PgenCounter=None):
        self.original_tagname_ = None
        self.P = P
        self.validate_CryptoBinary(self.P)
        self.Q = Q
        self.validate_CryptoBinary(self.Q)
        self.G = G
        self.validate_CryptoBinary(self.G)
        self.Y = Y
        self.validate_CryptoBinary(self.Y)
        self.J = J
        self.validate_CryptoBinary(self.J)
        self.Seed = Seed
        self.validate_CryptoBinary(self.Seed)
        self.PgenCounter = PgenCounter
        self.validate_CryptoBinary(self.PgenCounter)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DSAKeyValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DSAKeyValueType.subclass:
            return DSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return DSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_P(self): return self.P
    def set_P(self, P): self.P = P
    def get_Q(self): return self.Q
    def set_Q(self, Q): self.Q = Q
    def get_G(self): return self.G
    def set_G(self, G): self.G = G
    def get_Y(self): return self.Y
    def set_Y(self, Y): self.Y = Y
    def get_J(self): return self.J
    def set_J(self, J): self.J = J
    def get_Seed(self): return self.Seed
    def set_Seed(self, Seed): self.Seed = Seed
    def get_PgenCounter(self): return self.PgenCounter
    def set_PgenCounter(self, PgenCounter): self.PgenCounter = PgenCounter
    def validate_CryptoBinary(self, value):
        # Validate type CryptoBinary, a restriction on base64Binary.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.P is not None or
            self.Q is not None or
            self.G is not None or
            self.Y is not None or
            self.J is not None or
            self.Seed is not None or
            self.PgenCounter is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DSAKeyValueType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DSAKeyValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DSAKeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DSAKeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DSAKeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DSAKeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.P is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sP>%s</%sP>%s' % (namespace_, self.gds_format_base64(self.P, input_name='P'), namespace_, eol_))
        if self.Q is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQ>%s</%sQ>%s' % (namespace_, self.gds_format_base64(self.Q, input_name='Q'), namespace_, eol_))
        if self.G is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sG>%s</%sG>%s' % (namespace_, self.gds_format_base64(self.G, input_name='G'), namespace_, eol_))
        if self.Y is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sY>%s</%sY>%s' % (namespace_, self.gds_format_base64(self.Y, input_name='Y'), namespace_, eol_))
        if self.J is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJ>%s</%sJ>%s' % (namespace_, self.gds_format_base64(self.J, input_name='J'), namespace_, eol_))
        if self.Seed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeed>%s</%sSeed>%s' % (namespace_, self.gds_format_base64(self.Seed, input_name='Seed'), namespace_, eol_))
        if self.PgenCounter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPgenCounter>%s</%sPgenCounter>%s' % (namespace_, self.gds_format_base64(self.PgenCounter, input_name='PgenCounter'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'P':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'P')
            else:
                bval_ = None
            self.P = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.P)
        elif nodeName_ == 'Q':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Q')
            else:
                bval_ = None
            self.Q = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Q)
        elif nodeName_ == 'G':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'G')
            else:
                bval_ = None
            self.G = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.G)
        elif nodeName_ == 'Y':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Y')
            else:
                bval_ = None
            self.Y = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Y)
        elif nodeName_ == 'J':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'J')
            else:
                bval_ = None
            self.J = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.J)
        elif nodeName_ == 'Seed':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Seed')
            else:
                bval_ = None
            self.Seed = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Seed)
        elif nodeName_ == 'PgenCounter':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'PgenCounter')
            else:
                bval_ = None
            self.PgenCounter = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.PgenCounter)
# end class DSAKeyValueType


class RSAKeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Modulus=None, Exponent=None):
        self.original_tagname_ = None
        self.Modulus = Modulus
        self.validate_CryptoBinary(self.Modulus)
        self.Exponent = Exponent
        self.validate_CryptoBinary(self.Exponent)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RSAKeyValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RSAKeyValueType.subclass:
            return RSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return RSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Modulus(self): return self.Modulus
    def set_Modulus(self, Modulus): self.Modulus = Modulus
    def get_Exponent(self): return self.Exponent
    def set_Exponent(self, Exponent): self.Exponent = Exponent
    def validate_CryptoBinary(self, value):
        # Validate type CryptoBinary, a restriction on base64Binary.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.Modulus is not None or
            self.Exponent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RSAKeyValueType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RSAKeyValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RSAKeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RSAKeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RSAKeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RSAKeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Modulus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sModulus>%s</%sModulus>%s' % (namespace_, self.gds_format_base64(self.Modulus, input_name='Modulus'), namespace_, eol_))
        if self.Exponent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExponent>%s</%sExponent>%s' % (namespace_, self.gds_format_base64(self.Exponent, input_name='Exponent'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Modulus':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Modulus')
            else:
                bval_ = None
            self.Modulus = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Modulus)
        elif nodeName_ == 'Exponent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Exponent')
            else:
                bval_ = None
            self.Exponent = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Exponent)
# end class RSAKeyValueType


GDSClassesMapping = {
    'ANN': ANNType,
    'AltriDatiIdentificativi': AltriDatiIdentificativiNoSedeType,
    'CanonicalizationMethod': CanonicalizationMethodType,
    'CedentePrestatoreDTE': CedentePrestatoreDTEType,
    'CedentePrestatoreDTR': CedentePrestatoreDTRType,
    'CessionarioCommittenteDTE': CessionarioCommittenteDTEType,
    'CessionarioCommittenteDTR': CessionarioCommittenteDTRType,
    'DSAKeyValue': DSAKeyValueType,
    'DTE': DTEType,
    'DTR': DTRType,
    'DatiFattura': DatiFatturaType,
    'DatiFatturaBodyDTE': DatiFatturaBodyDTEType,
    'DatiFatturaBodyDTR': DatiFatturaBodyDTRType,
    'DatiFatturaHeader': DatiFatturaHeaderType,
    'DatiGenerali': DatiGeneraliDTRType,
    'DatiIVA': DatiIVAType,
    'DatiRiepilogo': DatiRiepilogoType,
    'Dichiarante': DichiaranteType,
    'DigestMethod': DigestMethodType,
    'IdFiscaleIVA': IdFiscaleITIvaType,
    'IdentificativiFiscali': IdentificativiFiscaliITType,
    'KeyInfo': KeyInfoType,
    'KeyValue': KeyValueType,
    'Manifest': ManifestType,
    'Object': ObjectType,
    'PGPData': PGPDataType,
    'RSAKeyValue': RSAKeyValueType,
    'RappresentanteFiscale': RappresentanteFiscaleType,
    'Reference': ReferenceType,
    'RetrievalMethod': RetrievalMethodType,
    'Rettifica': RettificaType,
    'SPKIData': SPKIDataType,
    'Sede': IndirizzoNoCAPType,
    'Signature': SignatureType,
    'SignatureMethod': SignatureMethodType,
    'SignatureProperties': SignaturePropertiesType,
    'SignatureProperty': SignaturePropertyType,
    'SignatureValue': SignatureValueType,
    'SignedInfo': SignedInfoType,
    'StabileOrganizzazione': IndirizzoType,
    'Transform': TransformType,
    'Transforms': TransformsType,
    'X509Data': X509DataType,
    'X509IssuerSerial': X509IssuerSerialType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DatiFatturaType'
        rootClass = DatiFatturaType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DatiFatturaType'
        rootClass = DatiFatturaType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DatiFatturaType'
        rootClass = DatiFatturaType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DatiFatturaType'
        rootClass = DatiFatturaType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from agenzia_entrate import *\n\n')
        sys.stdout.write('import agenzia_entrate as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ANNType",
    "AltriDatiIdentificativiNoCAPType",
    "AltriDatiIdentificativiNoSedeType",
    "CanonicalizationMethodType",
    "CedentePrestatoreDTEType",
    "CedentePrestatoreDTRType",
    "CessionarioCommittenteDTEType",
    "CessionarioCommittenteDTRType",
    "DSAKeyValueType",
    "DTEType",
    "DTRType",
    "DatiFatturaBodyDTEType",
    "DatiFatturaBodyDTRType",
    "DatiFatturaHeaderType",
    "DatiFatturaType",
    "DatiGeneraliDTRType",
    "DatiGeneraliType",
    "DatiIVAType",
    "DatiRiepilogoType",
    "DichiaranteType",
    "DigestMethodType",
    "IdFiscaleITIvaType",
    "IdFiscaleITType",
    "IdFiscaleType",
    "IdentificativiFiscaliITType",
    "IdentificativiFiscaliNoIVAType",
    "IdentificativiFiscaliType",
    "IndirizzoNoCAPType",
    "IndirizzoType",
    "KeyInfoType",
    "KeyValueType",
    "ManifestType",
    "ObjectType",
    "PGPDataType",
    "RSAKeyValueType",
    "RappresentanteFiscaleITType",
    "RappresentanteFiscaleType",
    "ReferenceType",
    "RetrievalMethodType",
    "RettificaType",
    "SPKIDataType",
    "SignatureMethodType",
    "SignaturePropertiesType",
    "SignaturePropertyType",
    "SignatureType",
    "SignatureValueType",
    "SignedInfoType",
    "TransformType",
    "TransformsType",
    "X509DataType",
    "X509IssuerSerialType"
]
